import { dew as _HTMLElementImplDewDew } from "./HTMLElement-impl.dew.js";
import { dew as _formControlsDewDew } from "../helpers/form-controls.dew.js";
import { dew as _stringsDewDew } from "../helpers/strings.dew.js";
var exports = {},
    _dewExec = false;
export function dew() {
  if (_dewExec) return exports;
  _dewExec = true;

  const HTMLElementImpl = _HTMLElementImplDewDew().implementation;

  const {
    getLabelsForLabelable
  } = _formControlsDewDew();

  const {
    parseFloatingPointNumber
  } = _stringsDewDew();

  class HTMLProgressElementImpl extends HTMLElementImpl {
    constructor(globalObject, args, privateData) {
      super(globalObject, args, privateData);
      this._labels = null;
    }

    get _isDeterminate() {
      return this.hasAttributeNS(null, "value");
    } // https://html.spec.whatwg.org/multipage/form-elements.html#concept-progress-value


    get _value() {
      const valueAttr = this.getAttributeNS(null, "value");
      const parsedValue = parseFloatingPointNumber(valueAttr);

      if (parsedValue !== null && parsedValue > 0) {
        return parsedValue;
      }

      return 0;
    } // https://html.spec.whatwg.org/multipage/form-elements.html#concept-progress-current-value


    get _currentValue() {
      const value = this._value;
      return value > this.max ? this.max : value;
    }

    get value() {
      if (this._isDeterminate) {
        return this._currentValue;
      }

      return 0;
    }

    set value(value) {
      this.setAttributeNS(null, "value", value);
    }

    get max() {
      const max = this.getAttributeNS(null, "max");

      if (max !== null) {
        const parsedMax = parseFloatingPointNumber(max);

        if (parsedMax !== null && parsedMax > 0) {
          return parsedMax;
        }
      }

      return 1.0;
    }

    set max(value) {
      if (value > 0) {
        this.setAttributeNS(null, "max", value);
      }
    }

    get position() {
      if (!this._isDeterminate) {
        return -1;
      }

      return this._currentValue / this.max;
    }

    get labels() {
      return getLabelsForLabelable(this);
    }

  }

  exports = {
    implementation: HTMLProgressElementImpl
  };
  return exports;
}