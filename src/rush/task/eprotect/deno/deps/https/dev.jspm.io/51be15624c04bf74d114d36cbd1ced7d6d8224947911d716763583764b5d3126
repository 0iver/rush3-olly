import { dew as _CSSStyleSheetDewDew } from "./CSSStyleSheet.dew.js";
import { dew as _CSSStyleRuleDewDew } from "./CSSStyleRule.dew.js";
import { dew as _CSSMediaRuleDewDew } from "./CSSMediaRule.dew.js";
import { dew as _CSSSupportsRuleDewDew } from "./CSSSupportsRule.dew.js";
import { dew as _CSSStyleDeclarationDewDew } from "./CSSStyleDeclaration.dew.js";
import { dew as _CSSKeyframeRuleDewDew } from "./CSSKeyframeRule.dew.js";
import { dew as _CSSKeyframesRuleDewDew } from "./CSSKeyframesRule.dew.js";
var exports = {},
    _dewExec = false;
export function dew() {
  if (_dewExec) return exports;
  _dewExec = true;
  //.CommonJS
  var CSSOM = {
    CSSStyleSheet: _CSSStyleSheetDewDew().CSSStyleSheet,
    CSSStyleRule: _CSSStyleRuleDewDew().CSSStyleRule,
    CSSMediaRule: _CSSMediaRuleDewDew().CSSMediaRule,
    CSSSupportsRule: _CSSSupportsRuleDewDew().CSSSupportsRule,
    CSSStyleDeclaration: _CSSStyleDeclarationDewDew().CSSStyleDeclaration,
    CSSKeyframeRule: _CSSKeyframeRuleDewDew().CSSKeyframeRule,
    CSSKeyframesRule: _CSSKeyframesRuleDewDew().CSSKeyframesRule
  }; ///CommonJS

  /**
   * Produces a deep copy of stylesheet â€” the instance variables of stylesheet are copied recursively.
   * @param {CSSStyleSheet|CSSOM.CSSStyleSheet} stylesheet
   * @nosideeffects
   * @return {CSSOM.CSSStyleSheet}
   */

  CSSOM.clone = function clone(stylesheet) {
    var cloned = new CSSOM.CSSStyleSheet();
    var rules = stylesheet.cssRules;

    if (!rules) {
      return cloned;
    }

    for (var i = 0, rulesLength = rules.length; i < rulesLength; i++) {
      var rule = rules[i];
      var ruleClone = cloned.cssRules[i] = new rule.constructor();
      var style = rule.style;

      if (style) {
        var styleClone = ruleClone.style = new CSSOM.CSSStyleDeclaration();

        for (var j = 0, styleLength = style.length; j < styleLength; j++) {
          var name = styleClone[j] = style[j];
          styleClone[name] = style[name];
          styleClone._importants[name] = style.getPropertyPriority(name);
        }

        styleClone.length = style.length;
      }

      if (rule.hasOwnProperty('keyText')) {
        ruleClone.keyText = rule.keyText;
      }

      if (rule.hasOwnProperty('selectorText')) {
        ruleClone.selectorText = rule.selectorText;
      }

      if (rule.hasOwnProperty('mediaText')) {
        ruleClone.mediaText = rule.mediaText;
      }

      if (rule.hasOwnProperty('conditionText')) {
        ruleClone.conditionText = rule.conditionText;
      }

      if (rule.hasOwnProperty('cssRules')) {
        ruleClone.cssRules = clone(rule).cssRules;
      }
    }

    return cloned;
  }; //.CommonJS


  exports.clone = CSSOM.clone; ///CommonJS

  return exports;
}