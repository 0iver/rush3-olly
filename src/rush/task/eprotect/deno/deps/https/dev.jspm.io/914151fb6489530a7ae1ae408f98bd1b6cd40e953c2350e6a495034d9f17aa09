import { dew as _internalConstantsDewDew } from "../helpers/internal-constants.dew.js";
import { dew as _namespacesDewDew } from "../helpers/namespaces.dew.js";
import { dew as _utilsDewDew } from "../../utils.dew.js";
import { dew as _SVGAnimatedStringDewDew } from "../generated/SVGAnimatedString.dew.js";
import { dew as _ElementImplDewDew } from "./Element-impl.dew.js";
import { dew as _ElementCSSInlineStyleImplDewDew } from "./ElementCSSInlineStyle-impl.dew.js";
import { dew as _GlobalEventHandlersImplDewDew } from "./GlobalEventHandlers-impl.dew.js";
import { dew as _HTMLOrSVGElementImplDewDew } from "./HTMLOrSVGElement-impl.dew.js";
var exports = {},
    _dewExec = false;
export function dew() {
  if (_dewExec) return exports;
  _dewExec = true;

  const {
    domSymbolTree
  } = _internalConstantsDewDew();

  const {
    SVG_NS
  } = _namespacesDewDew();

  const {
    mixin
  } = _utilsDewDew();

  const SVGAnimatedString = _SVGAnimatedStringDewDew();

  const ElementImpl = _ElementImplDewDew().implementation;

  const ElementCSSInlineStyleImpl = _ElementCSSInlineStyleImplDewDew().implementation;

  const GlobalEventHandlersImpl = _GlobalEventHandlersImplDewDew().implementation;

  const HTMLOrSVGElementImpl = _HTMLOrSVGElementImplDewDew().implementation;

  class SVGElementImpl extends ElementImpl {
    constructor(globalObject, args, privateData) {
      super(globalObject, args, privateData);

      this._initHTMLOrSVGElement();

      this._initElementCSSInlineStyle();

      this._initGlobalEvents();
    } // Keep in sync with HTMLElement. https://github.com/jsdom/jsdom/issues/2599


    _attrModified(name, value, oldValue) {
      if (name === "style" && value !== oldValue && !this._settingCssText) {
        this._settingCssText = true;
        this._style.cssText = value;
        this._settingCssText = false;
      } else if (name.startsWith("on")) {
        this._globalEventChanged(name.substring(2));
      }

      super._attrModified.apply(this, arguments);
    }

    get className() {
      return SVGAnimatedString.createImpl(this._globalObject, [], {
        element: this,
        attribute: "class"
      });
    }

    get ownerSVGElement() {
      let e = domSymbolTree.parent(this);

      while (e && e.namespaceURI === SVG_NS) {
        if (e.localName === "svg") {
          return e;
        }

        e = domSymbolTree.parent(e);
      }

      return null;
    }

    get viewportElement() {
      // TODO: <symbol>/<use> may make this different from ownerSVGElement.
      return this.ownerSVGElement;
    }

  }

  SVGElementImpl.attributeRegistry = new Map();
  mixin(SVGElementImpl.prototype, ElementCSSInlineStyleImpl.prototype);
  mixin(SVGElementImpl.prototype, GlobalEventHandlersImpl.prototype);
  mixin(SVGElementImpl.prototype, HTMLOrSVGElementImpl.prototype);
  exports.implementation = SVGElementImpl;
  return exports;
}