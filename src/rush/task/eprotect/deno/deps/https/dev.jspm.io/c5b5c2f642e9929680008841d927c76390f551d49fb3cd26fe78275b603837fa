import { dew as _npmAssertPlus1DewDew } from "/npm:assert-plus@1?dew";
import { dew as _algsDewDew } from "./algs.dew.js";
import _crypto from "/npm:@jspm/core@1/nodelibs/crypto.js";
import { dew as _fingerprintDewDew } from "./fingerprint.dew.js";
import { dew as _signatureDewDew } from "./signature.dew.js";
import { dew as _errorsDewDew } from "./errors.dew.js";
import _util from "/npm:@jspm/core@1/nodelibs/util.js";
import { dew as _utilsDewDew } from "./utils.dew.js";
import { dew as _npmAsnDew } from "/npm:asn1@0.2?dew";
import { dew as _npmSaferBuffer2DewDew } from "/npm:safer-buffer@2?dew";
var exports = {},
    _dewExec = false;

var _global = typeof self !== "undefined" ? self : global;

export function dew() {
  if (_dewExec) return exports;
  _dewExec = true;
  // Copyright 2017 Joyent, Inc.
  exports = Identity;

  var assert = _npmAssertPlus1DewDew();

  var algs = _algsDewDew();

  var crypto = _crypto;

  var Fingerprint = _fingerprintDewDew();

  var Signature = _signatureDewDew();

  var errs = _errorsDewDew();

  var util = _util;

  var utils = _utilsDewDew();

  var asn1 = _npmAsnDew();

  var Buffer = _npmSaferBuffer2DewDew().Buffer;
  /*JSSTYLED*/


  var DNS_NAME_RE = /^([*]|[a-z0-9][a-z0-9\-]{0,62})(?:\.([*]|[a-z0-9][a-z0-9\-]{0,62}))*$/i;
  var oids = {};
  oids.cn = '2.5.4.3';
  oids.o = '2.5.4.10';
  oids.ou = '2.5.4.11';
  oids.l = '2.5.4.7';
  oids.s = '2.5.4.8';
  oids.c = '2.5.4.6';
  oids.sn = '2.5.4.4';
  oids.postalCode = '2.5.4.17';
  oids.serialNumber = '2.5.4.5';
  oids.street = '2.5.4.9';
  oids.x500UniqueIdentifier = '2.5.4.45';
  oids.role = '2.5.4.72';
  oids.telephoneNumber = '2.5.4.20';
  oids.description = '2.5.4.13';
  oids.dc = '0.9.2342.19200300.100.1.25';
  oids.uid = '0.9.2342.19200300.100.1.1';
  oids.mail = '0.9.2342.19200300.100.1.3';
  oids.title = '2.5.4.12';
  oids.gn = '2.5.4.42';
  oids.initials = '2.5.4.43';
  oids.pseudonym = '2.5.4.65';
  oids.emailAddress = '1.2.840.113549.1.9.1';
  var unoids = {};
  Object.keys(oids).forEach(function (k) {
    unoids[oids[k]] = k;
  });

  function Identity(opts) {
    var self = this || _global;
    assert.object(opts, 'options');
    assert.arrayOfObject(opts.components, 'options.components');
    (this || _global).components = opts.components;
    (this || _global).componentLookup = {};

    (this || _global).components.forEach(function (c) {
      if (c.name && !c.oid) c.oid = oids[c.name];
      if (c.oid && !c.name) c.name = unoids[c.oid];
      if (self.componentLookup[c.name] === undefined) self.componentLookup[c.name] = [];
      self.componentLookup[c.name].push(c);
    });

    if ((this || _global).componentLookup.cn && (this || _global).componentLookup.cn.length > 0) {
      (this || _global).cn = (this || _global).componentLookup.cn[0].value;
    }

    assert.optionalString(opts.type, 'options.type');

    if (opts.type === undefined) {
      if ((this || _global).components.length === 1 && (this || _global).componentLookup.cn && (this || _global).componentLookup.cn.length === 1 && (this || _global).componentLookup.cn[0].value.match(DNS_NAME_RE)) {
        (this || _global).type = 'host';
        (this || _global).hostname = (this || _global).componentLookup.cn[0].value;
      } else if ((this || _global).componentLookup.dc && (this || _global).components.length === (this || _global).componentLookup.dc.length) {
        (this || _global).type = 'host';
        (this || _global).hostname = (this || _global).componentLookup.dc.map(function (c) {
          return c.value;
        }).join('.');
      } else if ((this || _global).componentLookup.uid && (this || _global).components.length === (this || _global).componentLookup.uid.length) {
        (this || _global).type = 'user';
        (this || _global).uid = (this || _global).componentLookup.uid[0].value;
      } else if ((this || _global).componentLookup.cn && (this || _global).componentLookup.cn.length === 1 && (this || _global).componentLookup.cn[0].value.match(DNS_NAME_RE)) {
        (this || _global).type = 'host';
        (this || _global).hostname = (this || _global).componentLookup.cn[0].value;
      } else if ((this || _global).componentLookup.uid && (this || _global).componentLookup.uid.length === 1) {
        (this || _global).type = 'user';
        (this || _global).uid = (this || _global).componentLookup.uid[0].value;
      } else if ((this || _global).componentLookup.mail && (this || _global).componentLookup.mail.length === 1) {
        (this || _global).type = 'email';
        (this || _global).email = (this || _global).componentLookup.mail[0].value;
      } else if ((this || _global).componentLookup.cn && (this || _global).componentLookup.cn.length === 1) {
        (this || _global).type = 'user';
        (this || _global).uid = (this || _global).componentLookup.cn[0].value;
      } else {
        (this || _global).type = 'unknown';
      }
    } else {
      (this || _global).type = opts.type;
      if ((this || _global).type === 'host') (this || _global).hostname = opts.hostname;else if ((this || _global).type === 'user') (this || _global).uid = opts.uid;else if ((this || _global).type === 'email') (this || _global).email = opts.email;else throw new Error('Unknown type ' + (this || _global).type);
    }
  }

  Identity.prototype.toString = function () {
    return (this || _global).components.map(function (c) {
      var n = c.name.toUpperCase();
      /*JSSTYLED*/

      n = n.replace(/=/g, '\\=');
      var v = c.value;
      /*JSSTYLED*/

      v = v.replace(/,/g, '\\,');
      return n + '=' + v;
    }).join(', ');
  };

  Identity.prototype.get = function (name, asArray) {
    assert.string(name, 'name');
    var arr = (this || _global).componentLookup[name];
    if (arr === undefined || arr.length === 0) return undefined;
    if (!asArray && arr.length > 1) throw new Error('Multiple values for attribute ' + name);
    if (!asArray) return arr[0].value;
    return arr.map(function (c) {
      return c.value;
    });
  };

  Identity.prototype.toArray = function (idx) {
    return (this || _global).components.map(function (c) {
      return {
        name: c.name,
        value: c.value
      };
    });
  };
  /*
   * These are from X.680 -- PrintableString allowed chars are in section 37.4
   * table 8. Spec for IA5Strings is "1,6 + SPACE + DEL" where 1 refers to
   * ISO IR #001 (standard ASCII control characters) and 6 refers to ISO IR #006
   * (the basic ASCII character set).
   */

  /* JSSTYLED */


  var NOT_PRINTABLE = /[^a-zA-Z0-9 '(),+.\/:=?-]/;
  /* JSSTYLED */

  var NOT_IA5 = /[^\x00-\x7f]/;

  Identity.prototype.toAsn1 = function (der, tag) {
    der.startSequence(tag);

    (this || _global).components.forEach(function (c) {
      der.startSequence(asn1.Ber.Constructor | asn1.Ber.Set);
      der.startSequence();
      der.writeOID(c.oid);
      /*
       * If we fit in a PrintableString, use that. Otherwise use an
       * IA5String or UTF8String.
       *
       * If this identity was parsed from a DN, use the ASN.1 types
       * from the original representation (otherwise this might not
       * be a full match for the original in some validators).
       */

      if (c.asn1type === asn1.Ber.Utf8String || c.value.match(NOT_IA5)) {
        var v = Buffer.from(c.value, 'utf8');
        der.writeBuffer(v, asn1.Ber.Utf8String);
      } else if (c.asn1type === asn1.Ber.IA5String || c.value.match(NOT_PRINTABLE)) {
        der.writeString(c.value, asn1.Ber.IA5String);
      } else {
        var type = asn1.Ber.PrintableString;
        if (c.asn1type !== undefined) type = c.asn1type;
        der.writeString(c.value, type);
      }

      der.endSequence();
      der.endSequence();
    });

    der.endSequence();
  };

  function globMatch(a, b) {
    if (a === '**' || b === '**') return true;
    var aParts = a.split('.');
    var bParts = b.split('.');
    if (aParts.length !== bParts.length) return false;

    for (var i = 0; i < aParts.length; ++i) {
      if (aParts[i] === '*' || bParts[i] === '*') continue;
      if (aParts[i] !== bParts[i]) return false;
    }

    return true;
  }

  Identity.prototype.equals = function (other) {
    if (!Identity.isIdentity(other, [1, 0])) return false;
    if (other.components.length !== (this || _global).components.length) return false;

    for (var i = 0; i < (this || _global).components.length; ++i) {
      if ((this || _global).components[i].oid !== other.components[i].oid) return false;

      if (!globMatch((this || _global).components[i].value, other.components[i].value)) {
        return false;
      }
    }

    return true;
  };

  Identity.forHost = function (hostname) {
    assert.string(hostname, 'hostname');
    return new Identity({
      type: 'host',
      hostname: hostname,
      components: [{
        name: 'cn',
        value: hostname
      }]
    });
  };

  Identity.forUser = function (uid) {
    assert.string(uid, 'uid');
    return new Identity({
      type: 'user',
      uid: uid,
      components: [{
        name: 'uid',
        value: uid
      }]
    });
  };

  Identity.forEmail = function (email) {
    assert.string(email, 'email');
    return new Identity({
      type: 'email',
      email: email,
      components: [{
        name: 'mail',
        value: email
      }]
    });
  };

  Identity.parseDN = function (dn) {
    assert.string(dn, 'dn');
    var parts = [''];
    var idx = 0;
    var rem = dn;

    while (rem.length > 0) {
      var m;
      /*JSSTYLED*/

      if ((m = /^,/.exec(rem)) !== null) {
        parts[++idx] = '';
        rem = rem.slice(m[0].length);
        /*JSSTYLED*/
      } else if ((m = /^\\,/.exec(rem)) !== null) {
        parts[idx] += ',';
        rem = rem.slice(m[0].length);
        /*JSSTYLED*/
      } else if ((m = /^\\./.exec(rem)) !== null) {
        parts[idx] += m[0];
        rem = rem.slice(m[0].length);
        /*JSSTYLED*/
      } else if ((m = /^[^\\,]+/.exec(rem)) !== null) {
        parts[idx] += m[0];
        rem = rem.slice(m[0].length);
      } else {
        throw new Error('Failed to parse DN');
      }
    }

    var cmps = parts.map(function (c) {
      c = c.trim();
      var eqPos = c.indexOf('=');

      while (eqPos > 0 && c.charAt(eqPos - 1) === '\\') eqPos = c.indexOf('=', eqPos + 1);

      if (eqPos === -1) {
        throw new Error('Failed to parse DN');
      }
      /*JSSTYLED*/


      var name = c.slice(0, eqPos).toLowerCase().replace(/\\=/g, '=');
      var value = c.slice(eqPos + 1);
      return {
        name: name,
        value: value
      };
    });
    return new Identity({
      components: cmps
    });
  };

  Identity.fromArray = function (components) {
    assert.arrayOfObject(components, 'components');
    components.forEach(function (cmp) {
      assert.object(cmp, 'component');
      assert.string(cmp.name, 'component.name');

      if (!Buffer.isBuffer(cmp.value) && !(typeof cmp.value === 'string')) {
        throw new Error('Invalid component value');
      }
    });
    return new Identity({
      components: components
    });
  };

  Identity.parseAsn1 = function (der, top) {
    var components = [];
    der.readSequence(top);
    var end = der.offset + der.length;

    while (der.offset < end) {
      der.readSequence(asn1.Ber.Constructor | asn1.Ber.Set);
      var after = der.offset + der.length;
      der.readSequence();
      var oid = der.readOID();
      var type = der.peek();
      var value;

      switch (type) {
        case asn1.Ber.PrintableString:
        case asn1.Ber.IA5String:
        case asn1.Ber.OctetString:
        case asn1.Ber.T61String:
          value = der.readString(type);
          break;

        case asn1.Ber.Utf8String:
          value = der.readString(type, true);
          value = value.toString('utf8');
          break;

        case asn1.Ber.CharacterString:
        case asn1.Ber.BMPString:
          value = der.readString(type, true);
          value = value.toString('utf16le');
          break;

        default:
          throw new Error('Unknown asn1 type ' + type);
      }

      components.push({
        oid: oid,
        asn1type: type,
        value: value
      });
      der._offset = after;
    }

    der._offset = end;
    return new Identity({
      components: components
    });
  };

  Identity.isIdentity = function (obj, ver) {
    return utils.isCompatible(obj, Identity, ver);
  };
  /*
   * API versions for Identity:
   * [1,0] -- initial ver
   */


  Identity.prototype._sshpkApiVersion = [1, 0];

  Identity._oldVersionDetect = function (obj) {
    return [1, 0];
  };

  return exports;
}