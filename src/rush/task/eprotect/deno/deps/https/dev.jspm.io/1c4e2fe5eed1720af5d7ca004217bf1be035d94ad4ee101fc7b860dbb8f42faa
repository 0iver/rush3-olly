import { dew as _npmAssertPlus1DewDew } from "/npm:assert-plus@1?dew";
import { dew as _npmSaferBuffer2DewDew } from "/npm:safer-buffer@2?dew";
import { dew as _utilsDewDew } from "../utils.dew.js";
import { dew as _keyDewDew } from "../key.dew.js";
import { dew as _privateKeyDewDew } from "../private-key.dew.js";
import { dew as _pemDewDew } from "./pem.dew.js";
import { dew as _sshDewDew } from "./ssh.dew.js";
import { dew as _rfc4253DewDew } from "./rfc4253.dew.js";
import { dew as _dnssecDewDew } from "./dnssec.dew.js";
import { dew as _puttyDewDew } from "./putty.dew.js";
var exports = {},
    _dewExec = false;
export function dew() {
  if (_dewExec) return exports;
  _dewExec = true;
  // Copyright 2018 Joyent, Inc.
  exports = {
    read: read,
    write: write
  };

  var assert = _npmAssertPlus1DewDew();

  var Buffer = _npmSaferBuffer2DewDew().Buffer;

  var utils = _utilsDewDew();

  var Key = _keyDewDew();

  var PrivateKey = _privateKeyDewDew();

  var pem = _pemDewDew();

  var ssh = _sshDewDew();

  var rfc4253 = _rfc4253DewDew();

  var dnssec = _dnssecDewDew();

  var putty = _puttyDewDew();

  var DNSSEC_PRIVKEY_HEADER_PREFIX = 'Private-key-format: v1';

  function read(buf, options) {
    if (typeof buf === 'string') {
      if (buf.trim().match(/^[-]+[ ]*BEGIN/)) return pem.read(buf, options);
      if (buf.match(/^\s*ssh-[a-z]/)) return ssh.read(buf, options);
      if (buf.match(/^\s*ecdsa-/)) return ssh.read(buf, options);
      if (buf.match(/^putty-user-key-file-2:/i)) return putty.read(buf, options);
      if (findDNSSECHeader(buf)) return dnssec.read(buf, options);
      buf = Buffer.from(buf, 'binary');
    } else {
      assert.buffer(buf);
      if (findPEMHeader(buf)) return pem.read(buf, options);
      if (findSSHHeader(buf)) return ssh.read(buf, options);
      if (findPuTTYHeader(buf)) return putty.read(buf, options);
      if (findDNSSECHeader(buf)) return dnssec.read(buf, options);
    }

    if (buf.readUInt32BE(0) < buf.length) return rfc4253.read(buf, options);
    throw new Error('Failed to auto-detect format of key');
  }

  function findPuTTYHeader(buf) {
    var offset = 0;

    while (offset < buf.length && (buf[offset] === 32 || buf[offset] === 10 || buf[offset] === 9)) ++offset;

    if (offset + 22 <= buf.length && buf.slice(offset, offset + 22).toString('ascii').toLowerCase() === 'putty-user-key-file-2:') return true;
    return false;
  }

  function findSSHHeader(buf) {
    var offset = 0;

    while (offset < buf.length && (buf[offset] === 32 || buf[offset] === 10 || buf[offset] === 9)) ++offset;

    if (offset + 4 <= buf.length && buf.slice(offset, offset + 4).toString('ascii') === 'ssh-') return true;
    if (offset + 6 <= buf.length && buf.slice(offset, offset + 6).toString('ascii') === 'ecdsa-') return true;
    return false;
  }

  function findPEMHeader(buf) {
    var offset = 0;

    while (offset < buf.length && (buf[offset] === 32 || buf[offset] === 10)) ++offset;

    if (buf[offset] !== 45) return false;

    while (offset < buf.length && buf[offset] === 45) ++offset;

    while (offset < buf.length && buf[offset] === 32) ++offset;

    if (offset + 5 > buf.length || buf.slice(offset, offset + 5).toString('ascii') !== 'BEGIN') return false;
    return true;
  }

  function findDNSSECHeader(buf) {
    // private case first
    if (buf.length <= DNSSEC_PRIVKEY_HEADER_PREFIX.length) return false;
    var headerCheck = buf.slice(0, DNSSEC_PRIVKEY_HEADER_PREFIX.length);
    if (headerCheck.toString('ascii') === DNSSEC_PRIVKEY_HEADER_PREFIX) return true; // public-key RFC3110 ?
    // 'domain.com. IN KEY ...' or 'domain.com. IN DNSKEY ...'
    // skip any comment-lines

    if (typeof buf !== 'string') {
      buf = buf.toString('ascii');
    }

    var lines = buf.split('\n');
    var line = 0;
    /* JSSTYLED */

    while (lines[line].match(/^\;/)) line++;

    if (lines[line].toString('ascii').match(/\. IN KEY /)) return true;
    if (lines[line].toString('ascii').match(/\. IN DNSKEY /)) return true;
    return false;
  }

  function write(key, options) {
    throw new Error('"auto" format cannot be used for writing');
  }

  return exports;
}