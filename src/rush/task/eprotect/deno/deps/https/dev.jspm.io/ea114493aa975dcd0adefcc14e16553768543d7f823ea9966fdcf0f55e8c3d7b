import { dew as _x509DewDew } from "./x509.dew.js";
import { dew as _npmAssertPlus1DewDew } from "/npm:assert-plus@1?dew";
import { dew as _npmAsnDew } from "/npm:asn1@0.2?dew";
import { dew as _npmSaferBuffer2DewDew } from "/npm:safer-buffer@2?dew";
import { dew as _algsDewDew } from "../algs.dew.js";
import { dew as _utilsDewDew } from "../utils.dew.js";
import { dew as _keyDewDew } from "../key.dew.js";
import { dew as _privateKeyDewDew } from "../private-key.dew.js";
import { dew as _pemDewDew } from "./pem.dew.js";
import { dew as _identityDewDew } from "../identity.dew.js";
import { dew as _signatureDewDew } from "../signature.dew.js";
import { dew as _certificateDewDew } from "../certificate.dew.js";
var exports = {},
    _dewExec = false;
export function dew() {
  if (_dewExec) return exports;
  _dewExec = true;

  // Copyright 2016 Joyent, Inc.
  var x509 = _x509DewDew();

  exports = {
    read: read,
    verify: x509.verify,
    sign: x509.sign,
    write: write
  };

  var assert = _npmAssertPlus1DewDew();

  var asn1 = _npmAsnDew();

  var Buffer = _npmSaferBuffer2DewDew().Buffer;

  var algs = _algsDewDew();

  var utils = _utilsDewDew();

  var Key = _keyDewDew();

  var PrivateKey = _privateKeyDewDew();

  var pem = _pemDewDew();

  var Identity = _identityDewDew();

  var Signature = _signatureDewDew();

  var Certificate = _certificateDewDew();

  function read(buf, options) {
    if (typeof buf !== 'string') {
      assert.buffer(buf, 'buf');
      buf = buf.toString('ascii');
    }

    var lines = buf.trim().split(/[\r\n]+/g);
    var m;
    var si = -1;

    while (!m && si < lines.length) {
      m = lines[++si].match(
      /*JSSTYLED*/
      /[-]+[ ]*BEGIN CERTIFICATE[ ]*[-]+/);
    }

    assert.ok(m, 'invalid PEM header');
    var m2;
    var ei = lines.length;

    while (!m2 && ei > 0) {
      m2 = lines[--ei].match(
      /*JSSTYLED*/
      /[-]+[ ]*END CERTIFICATE[ ]*[-]+/);
    }

    assert.ok(m2, 'invalid PEM footer');
    lines = lines.slice(si, ei + 1);
    var headers = {};

    while (true) {
      lines = lines.slice(1);
      m = lines[0].match(
      /*JSSTYLED*/
      /^([A-Za-z0-9-]+): (.+)$/);
      if (!m) break;
      headers[m[1].toLowerCase()] = m[2];
    }
    /* Chop off the first and last lines */


    lines = lines.slice(0, -1).join('');
    buf = Buffer.from(lines, 'base64');
    return x509.read(buf, options);
  }

  function write(cert, options) {
    var dbuf = x509.write(cert, options);
    var header = 'CERTIFICATE';
    var tmp = dbuf.toString('base64');
    var len = tmp.length + tmp.length / 64 + 18 + 16 + header.length * 2 + 10;
    var buf = Buffer.alloc(len);
    var o = 0;
    o += buf.write('-----BEGIN ' + header + '-----\n', o);

    for (var i = 0; i < tmp.length;) {
      var limit = i + 64;
      if (limit > tmp.length) limit = tmp.length;
      o += buf.write(tmp.slice(i, limit), o);
      buf[o++] = 10;
      i = limit;
    }

    o += buf.write('-----END ' + header + '-----\n', o);
    return buf.slice(0, o);
  }

  return exports;
}