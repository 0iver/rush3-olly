import { dew as _npmTweetnaclDew } from "/npm:tweetnacl@0.14?dew";
import _stream from "/npm:@jspm/core@1/nodelibs/stream.js";
import _util from "/npm:@jspm/core@1/nodelibs/util.js";
import { dew as _npmAssertPlus1DewDew } from "/npm:assert-plus@1?dew";
import { dew as _npmSaferBuffer2DewDew } from "/npm:safer-buffer@2?dew";
import { dew as _signatureDewDew } from "./signature.dew.js";
var exports = {},
    _dewExec = false;

var _global = typeof self !== "undefined" ? self : global;

export function dew() {
  if (_dewExec) return exports;
  _dewExec = true;
  // Copyright 2015 Joyent, Inc.
  exports = {
    Verifier: Verifier,
    Signer: Signer
  };

  var nacl = _npmTweetnaclDew();

  var stream = _stream;
  var util = _util;

  var assert = _npmAssertPlus1DewDew();

  var Buffer = _npmSaferBuffer2DewDew().Buffer;

  var Signature = _signatureDewDew();

  function Verifier(key, hashAlgo) {
    if (hashAlgo.toLowerCase() !== 'sha512') throw new Error('ED25519 only supports the use of ' + 'SHA-512 hashes');
    (this || _global).key = key;
    (this || _global).chunks = [];
    stream.Writable.call(this || _global, {});
  }

  util.inherits(Verifier, stream.Writable);

  Verifier.prototype._write = function (chunk, enc, cb) {
    (this || _global).chunks.push(chunk);

    cb();
  };

  Verifier.prototype.update = function (chunk) {
    if (typeof chunk === 'string') chunk = Buffer.from(chunk, 'binary');

    (this || _global).chunks.push(chunk);
  };

  Verifier.prototype.verify = function (signature, fmt) {
    var sig;

    if (Signature.isSignature(signature, [2, 0])) {
      if (signature.type !== 'ed25519') return false;
      sig = signature.toBuffer('raw');
    } else if (typeof signature === 'string') {
      sig = Buffer.from(signature, 'base64');
    } else if (Signature.isSignature(signature, [1, 0])) {
      throw new Error('signature was created by too old ' + 'a version of sshpk and cannot be verified');
    }

    assert.buffer(sig);
    return nacl.sign.detached.verify(new Uint8Array(Buffer.concat((this || _global).chunks)), new Uint8Array(sig), new Uint8Array((this || _global).key.part.A.data));
  };

  function Signer(key, hashAlgo) {
    if (hashAlgo.toLowerCase() !== 'sha512') throw new Error('ED25519 only supports the use of ' + 'SHA-512 hashes');
    (this || _global).key = key;
    (this || _global).chunks = [];
    stream.Writable.call(this || _global, {});
  }

  util.inherits(Signer, stream.Writable);

  Signer.prototype._write = function (chunk, enc, cb) {
    (this || _global).chunks.push(chunk);

    cb();
  };

  Signer.prototype.update = function (chunk) {
    if (typeof chunk === 'string') chunk = Buffer.from(chunk, 'binary');

    (this || _global).chunks.push(chunk);
  };

  Signer.prototype.sign = function () {
    var sig = nacl.sign.detached(new Uint8Array(Buffer.concat((this || _global).chunks)), new Uint8Array(Buffer.concat([(this || _global).key.part.k.data, (this || _global).key.part.A.data])));
    var sigBuf = Buffer.from(sig);
    var sigObj = Signature.parse(sigBuf, 'ed25519', 'raw');
    sigObj.hashAlgorithm = 'sha512';
    return sigObj;
  };

  return exports;
}