import { dew as _npmWebidlConversions6DewDew } from "/npm:webidl-conversions@6?dew";
import { dew as _utilsDewDew } from "./utils.dew.js";
import { dew as _PageTransitionEventInitDewDew } from "./PageTransitionEventInit.dew.js";
import { dew as _EventDewDew } from "./Event.dew.js";
import { dew as _PageTransitionEventImplDewDew } from "../events/PageTransitionEvent-impl.dew.js";
var exports = {},
    _dewExec = false;
export function dew() {
  if (_dewExec) return exports;
  _dewExec = true;

  const conversions = _npmWebidlConversions6DewDew();

  const utils = _utilsDewDew();

  const PageTransitionEventInit = _PageTransitionEventInitDewDew();

  const implSymbol = utils.implSymbol;
  const ctorRegistrySymbol = utils.ctorRegistrySymbol;

  const Event = _EventDewDew();

  const interfaceName = "PageTransitionEvent";

  exports.is = function is(obj) {
    return utils.isObject(obj) && utils.hasOwn(obj, implSymbol) && obj[implSymbol] instanceof Impl.implementation;
  };

  exports.isImpl = function isImpl(obj) {
    return utils.isObject(obj) && obj instanceof Impl.implementation;
  };

  exports.convert = function convert(obj, {
    context = "The provided value"
  } = {}) {
    if (exports.is(obj)) {
      return utils.implForWrapper(obj);
    }

    throw new TypeError(`${context} is not of type 'PageTransitionEvent'.`);
  };

  exports.create = function create(globalObject, constructorArgs, privateData) {
    if (globalObject[ctorRegistrySymbol] === undefined) {
      throw new Error("Internal error: invalid global object");
    }

    const ctor = globalObject[ctorRegistrySymbol]["PageTransitionEvent"];

    if (ctor === undefined) {
      throw new Error("Internal error: constructor PageTransitionEvent is not installed on the passed global object");
    }

    let obj = Object.create(ctor.prototype);
    obj = exports.setup(obj, globalObject, constructorArgs, privateData);
    return obj;
  };

  exports.createImpl = function createImpl(globalObject, constructorArgs, privateData) {
    const obj = exports.create(globalObject, constructorArgs, privateData);
    return utils.implForWrapper(obj);
  };

  exports._internalSetup = function _internalSetup(obj, globalObject) {
    Event._internalSetup(obj, globalObject);
  };

  exports.setup = function setup(obj, globalObject, constructorArgs = [], privateData = {}) {
    privateData.wrapper = obj;

    exports._internalSetup(obj, globalObject);

    Object.defineProperty(obj, implSymbol, {
      value: new Impl.implementation(globalObject, constructorArgs, privateData),
      configurable: true
    });
    obj[implSymbol][utils.wrapperSymbol] = obj;

    if (Impl.init) {
      Impl.init(obj[implSymbol], privateData);
    }

    return obj;
  };

  exports.install = function install(globalObject) {
    if (globalObject.Event === undefined) {
      throw new Error("Internal error: attempting to evaluate PageTransitionEvent before Event");
    }

    class PageTransitionEvent extends globalObject.Event {
      constructor(type) {
        if (arguments.length < 1) {
          throw new TypeError("Failed to construct 'PageTransitionEvent': 1 argument required, but only " + arguments.length + " present.");
        }

        const args = [];
        {
          let curArg = arguments[0];
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to construct 'PageTransitionEvent': parameter 1"
          });
          args.push(curArg);
        }
        {
          let curArg = arguments[1];
          curArg = PageTransitionEventInit.convert(curArg, {
            context: "Failed to construct 'PageTransitionEvent': parameter 2"
          });
          args.push(curArg);
        }
        return exports.setup(Object.create(new.target.prototype), globalObject, args);
      }

      get persisted() {
        const esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["persisted"];
      }

    }

    Object.defineProperties(PageTransitionEvent.prototype, {
      persisted: {
        enumerable: true
      },
      [Symbol.toStringTag]: {
        value: "PageTransitionEvent",
        configurable: true
      }
    });

    if (globalObject[ctorRegistrySymbol] === undefined) {
      globalObject[ctorRegistrySymbol] = Object.create(null);
    }

    globalObject[ctorRegistrySymbol][interfaceName] = PageTransitionEvent;
    Object.defineProperty(globalObject, interfaceName, {
      configurable: true,
      writable: true,
      value: PageTransitionEvent
    });
  };

  const Impl = _PageTransitionEventImplDewDew();

  return exports;
}