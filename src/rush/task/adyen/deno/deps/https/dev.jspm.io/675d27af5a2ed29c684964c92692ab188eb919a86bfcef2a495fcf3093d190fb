import { dew as _HTMLElementImplDewDew } from "./HTMLElement-impl.dew.js";
import { dew as _DocumentDewDew } from "../generated/Document.dew.js";
import { dew as _DocumentFragmentDewDew } from "../generated/DocumentFragment.dew.js";
import { dew as _internalConstantsDewDew } from "../helpers/internal-constants.dew.js";
import { dew as _nodeDewDew } from "../node.dew.js";
var exports = {},
    _dewExec = false;
export function dew() {
  if (_dewExec) return exports;
  _dewExec = true;

  const HTMLElementImpl = _HTMLElementImplDewDew().implementation;

  const Document = _DocumentDewDew();

  const DocumentFragment = _DocumentFragmentDewDew();

  const {
    cloningSteps,
    domSymbolTree
  } = _internalConstantsDewDew();

  const {
    clone
  } = _nodeDewDew();

  class HTMLTemplateElementImpl extends HTMLElementImpl {
    constructor(globalObject, args, privateData) {
      super(globalObject, args, privateData);

      const doc = this._appropriateTemplateContentsOwnerDocument(this._ownerDocument);

      this._templateContents = DocumentFragment.createImpl(this._globalObject, [], {
        ownerDocument: doc,
        host: this
      });
    } // https://html.spec.whatwg.org/multipage/scripting.html#appropriate-template-contents-owner-document


    _appropriateTemplateContentsOwnerDocument(doc) {
      if (!doc._isInertTemplateDocument) {
        if (doc._associatedInertTemplateDocument === undefined) {
          const newDoc = Document.createImpl(this._globalObject, [], {
            options: {
              parsingMode: doc._parsingMode,
              encoding: doc._encoding
            }
          });
          newDoc._isInertTemplateDocument = true;
          doc._associatedInertTemplateDocument = newDoc;
        }

        doc = doc._associatedInertTemplateDocument;
      }

      return doc;
    } // https://html.spec.whatwg.org/multipage/scripting.html#template-adopting-steps


    _adoptingSteps() {
      const doc = this._appropriateTemplateContentsOwnerDocument(this._ownerDocument);

      doc._adoptNode(this._templateContents);
    }

    get content() {
      return this._templateContents;
    }

    [cloningSteps](copy, node, document, cloneChildren) {
      if (!cloneChildren) {
        return;
      }

      for (const child of domSymbolTree.childrenIterator(node._templateContents)) {
        const childCopy = clone(child, copy._templateContents._ownerDocument, true);

        copy._templateContents.appendChild(childCopy);
      }
    }

  }

  exports = {
    implementation: HTMLTemplateElementImpl
  };
  return exports;
}