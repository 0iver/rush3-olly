import { dew as _npmAssertPlus1DewDew } from "/npm:assert-plus@1?dew";
import { dew as _npmSaferBuffer2DewDew } from "/npm:safer-buffer@2?dew";
import { dew as _algsDewDew } from "./algs.dew.js";
import _crypto from "/npm:@jspm/core@1/nodelibs/crypto.js";
import { dew as _fingerprintDewDew } from "./fingerprint.dew.js";
import { dew as _signatureDewDew } from "./signature.dew.js";
import { dew as _errorsDewDew } from "./errors.dew.js";
import _util from "/npm:@jspm/core@1/nodelibs/util.js";
import { dew as _utilsDewDew } from "./utils.dew.js";
import { dew as _dheDewDew } from "./dhe.dew.js";
import { dew as _edCompatDewDew } from "./ed-compat.dew.js";
import { dew as _npmTweetnaclDew } from "/npm:tweetnacl@0.14?dew";
import { dew as _keyDewDew } from "./key.dew.js";
import { dew as _autoDewDew } from "./formats/auto.dew.js";
import { dew as _pemDewDew } from "./formats/pem.dew.js";
import { dew as _pkcs1DewDew } from "./formats/pkcs1.dew.js";
import { dew as _pkcs8DewDew } from "./formats/pkcs8.dew.js";
import { dew as _rfc4253DewDew } from "./formats/rfc4253.dew.js";
import { dew as _sshPrivateDewDew } from "./formats/ssh-private.dew.js";
import { dew as _dnssecDewDew } from "./formats/dnssec.dew.js";
var exports = {},
    _dewExec = false;

var _global = typeof self !== "undefined" ? self : global;

export function dew() {
  if (_dewExec) return exports;
  _dewExec = true;
  // Copyright 2017 Joyent, Inc.
  exports = PrivateKey;

  var assert = _npmAssertPlus1DewDew();

  var Buffer = _npmSaferBuffer2DewDew().Buffer;

  var algs = _algsDewDew();

  var crypto = _crypto;

  var Fingerprint = _fingerprintDewDew();

  var Signature = _signatureDewDew();

  var errs = _errorsDewDew();

  var util = _util;

  var utils = _utilsDewDew();

  var dhe = _dheDewDew();

  var generateECDSA = dhe.generateECDSA;
  var generateED25519 = dhe.generateED25519;

  var edCompat = _edCompatDewDew();

  var nacl = _npmTweetnaclDew();

  var Key = _keyDewDew();

  var InvalidAlgorithmError = errs.InvalidAlgorithmError;
  var KeyParseError = errs.KeyParseError;
  var KeyEncryptedError = errs.KeyEncryptedError;
  var formats = {};
  formats['auto'] = _autoDewDew();
  formats['pem'] = _pemDewDew();
  formats['pkcs1'] = _pkcs1DewDew();
  formats['pkcs8'] = _pkcs8DewDew();
  formats['rfc4253'] = _rfc4253DewDew();
  formats['ssh-private'] = _sshPrivateDewDew();
  formats['openssh'] = formats['ssh-private'];
  formats['ssh'] = formats['ssh-private'];
  formats['dnssec'] = _dnssecDewDew();

  function PrivateKey(opts) {
    assert.object(opts, 'options');
    Key.call(this || _global, opts);
    (this || _global)._pubCache = undefined;
  }

  util.inherits(PrivateKey, Key);
  PrivateKey.formats = formats;

  PrivateKey.prototype.toBuffer = function (format, options) {
    if (format === undefined) format = 'pkcs1';
    assert.string(format, 'format');
    assert.object(formats[format], 'formats[format]');
    assert.optionalObject(options, 'options');
    return formats[format].write(this || _global, options);
  };

  PrivateKey.prototype.hash = function (algo, type) {
    return this.toPublic().hash(algo, type);
  };

  PrivateKey.prototype.fingerprint = function (algo, type) {
    return this.toPublic().fingerprint(algo, type);
  };

  PrivateKey.prototype.toPublic = function () {
    if ((this || _global)._pubCache) return (this || _global)._pubCache;
    var algInfo = algs.info[(this || _global).type];
    var pubParts = [];

    for (var i = 0; i < algInfo.parts.length; ++i) {
      var p = algInfo.parts[i];
      pubParts.push((this || _global).part[p]);
    }

    (this || _global)._pubCache = new Key({
      type: (this || _global).type,
      source: this || _global,
      parts: pubParts
    });
    if ((this || _global).comment) (this || _global)._pubCache.comment = (this || _global).comment;
    return (this || _global)._pubCache;
  };

  PrivateKey.prototype.derive = function (newType) {
    assert.string(newType, 'type');
    var priv, pub, pair;

    if ((this || _global).type === 'ed25519' && newType === 'curve25519') {
      priv = (this || _global).part.k.data;
      if (priv[0] === 0x00) priv = priv.slice(1);
      pair = nacl.box.keyPair.fromSecretKey(new Uint8Array(priv));
      pub = Buffer.from(pair.publicKey);
      return new PrivateKey({
        type: 'curve25519',
        parts: [{
          name: 'A',
          data: utils.mpNormalize(pub)
        }, {
          name: 'k',
          data: utils.mpNormalize(priv)
        }]
      });
    } else if ((this || _global).type === 'curve25519' && newType === 'ed25519') {
      priv = (this || _global).part.k.data;
      if (priv[0] === 0x00) priv = priv.slice(1);
      pair = nacl.sign.keyPair.fromSeed(new Uint8Array(priv));
      pub = Buffer.from(pair.publicKey);
      return new PrivateKey({
        type: 'ed25519',
        parts: [{
          name: 'A',
          data: utils.mpNormalize(pub)
        }, {
          name: 'k',
          data: utils.mpNormalize(priv)
        }]
      });
    }

    throw new Error('Key derivation not supported from ' + (this || _global).type + ' to ' + newType);
  };

  PrivateKey.prototype.createVerify = function (hashAlgo) {
    return this.toPublic().createVerify(hashAlgo);
  };

  PrivateKey.prototype.createSign = function (hashAlgo) {
    if (hashAlgo === undefined) hashAlgo = this.defaultHashAlgorithm();
    assert.string(hashAlgo, 'hash algorithm');
    /* ED25519 is not supported by OpenSSL, use a javascript impl. */

    if ((this || _global).type === 'ed25519' && edCompat !== undefined) return new edCompat.Signer(this || _global, hashAlgo);
    if ((this || _global).type === 'curve25519') throw new Error('Curve25519 keys are not suitable for ' + 'signing or verification');
    var v, nm, err;

    try {
      nm = hashAlgo.toUpperCase();
      v = crypto.createSign(nm);
    } catch (e) {
      err = e;
    }

    if (v === undefined || err instanceof Error && err.message.match(/Unknown message digest/)) {
      nm = 'RSA-';
      nm += hashAlgo.toUpperCase();
      v = crypto.createSign(nm);
    }

    assert.ok(v, 'failed to create verifier');
    var oldSign = v.sign.bind(v);
    var key = this.toBuffer('pkcs1');
    var type = (this || _global).type;
    var curve = (this || _global).curve;

    v.sign = function () {
      var sig = oldSign(key);
      if (typeof sig === 'string') sig = Buffer.from(sig, 'binary');
      sig = Signature.parse(sig, type, 'asn1');
      sig.hashAlgorithm = hashAlgo;
      sig.curve = curve;
      return sig;
    };

    return v;
  };

  PrivateKey.parse = function (data, format, options) {
    if (typeof data !== 'string') assert.buffer(data, 'data');
    if (format === undefined) format = 'auto';
    assert.string(format, 'format');
    if (typeof options === 'string') options = {
      filename: options
    };
    assert.optionalObject(options, 'options');
    if (options === undefined) options = {};
    assert.optionalString(options.filename, 'options.filename');
    if (options.filename === undefined) options.filename = '(unnamed)';
    assert.object(formats[format], 'formats[format]');

    try {
      var k = formats[format].read(data, options);
      assert.ok(k instanceof PrivateKey, 'key is not a private key');
      if (!k.comment) k.comment = options.filename;
      return k;
    } catch (e) {
      if (e.name === 'KeyEncryptedError') throw e;
      throw new KeyParseError(options.filename, format, e);
    }
  };

  PrivateKey.isPrivateKey = function (obj, ver) {
    return utils.isCompatible(obj, PrivateKey, ver);
  };

  PrivateKey.generate = function (type, options) {
    if (options === undefined) options = {};
    assert.object(options, 'options');

    switch (type) {
      case 'ecdsa':
        if (options.curve === undefined) options.curve = 'nistp256';
        assert.string(options.curve, 'options.curve');
        return generateECDSA(options.curve);

      case 'ed25519':
        return generateED25519();

      default:
        throw new Error('Key generation not supported with key ' + 'type "' + type + '"');
    }
  };
  /*
   * API versions for PrivateKey:
   * [1,0] -- initial ver
   * [1,1] -- added auto, pkcs[18], openssh/ssh-private formats
   * [1,2] -- added defaultHashAlgorithm
   * [1,3] -- added derive, ed, createDH
   * [1,4] -- first tagged version
   * [1,5] -- changed ed25519 part names and format
   * [1,6] -- type arguments for hash() and fingerprint()
   */


  PrivateKey.prototype._sshpkApiVersion = [1, 6];

  PrivateKey._oldVersionDetect = function (obj) {
    assert.func(obj.toPublic);
    assert.func(obj.createSign);
    if (obj.derive) return [1, 3];
    if (obj.defaultHashAlgorithm) return [1, 2];
    if (obj.formats['auto']) return [1, 1];
    return [1, 0];
  };

  return exports;
}