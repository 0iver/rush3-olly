import { dew as _utilsDewDew } from "../../utils.dew.js";
import { dew as _internalConstantsDewDew } from "../helpers/internal-constants.dew.js";
import { dew as _nodeTypeDewDew } from "../node-type.dew.js";
import { dew as _NodeImplDewDew } from "./Node-impl.dew.js";
import { dew as _NonElementParentNodeImplDewDew } from "./NonElementParentNode-impl.dew.js";
import { dew as _ParentNodeImplDewDew } from "./ParentNode-impl.dew.js";
import { dew as _utilsDew2Dew } from "../generated/utils.dew.js";
var exports = {},
    _dewExec = false;
export function dew() {
  if (_dewExec) return exports;
  _dewExec = true;

  const {
    mixin
  } = _utilsDewDew();

  const {
    domSymbolTree
  } = _internalConstantsDewDew();

  const NODE_TYPE = _nodeTypeDewDew();

  const NodeImpl = _NodeImplDewDew().implementation;

  const NonElementParentNodeImpl = _NonElementParentNodeImplDewDew().implementation;

  const ParentNodeImpl = _ParentNodeImplDewDew().implementation;

  const idlUtils = _utilsDew2Dew();

  class DocumentFragmentImpl extends NodeImpl {
    constructor(globalObject, args, privateData) {
      super(globalObject, args, {
        ownerDocument: idlUtils.implForWrapper(globalObject._document),
        ...privateData
      });
      const {
        host
      } = privateData;
      this._host = host;
      this.nodeType = NODE_TYPE.DOCUMENT_FRAGMENT_NODE;
    } // This is implemented separately for Document (which has a _ids cache) and DocumentFragment (which does not).


    getElementById(id) {
      if (id === "") {
        return null;
      }

      for (const descendant of domSymbolTree.treeIterator(this)) {
        if (descendant.nodeType === NODE_TYPE.ELEMENT_NODE && descendant.getAttributeNS(null, "id") === id) {
          return descendant;
        }
      }

      return null;
    }

  }

  mixin(DocumentFragmentImpl.prototype, NonElementParentNodeImpl.prototype);
  mixin(DocumentFragmentImpl.prototype, ParentNodeImpl.prototype);
  exports = {
    implementation: DocumentFragmentImpl
  };
  return exports;
}