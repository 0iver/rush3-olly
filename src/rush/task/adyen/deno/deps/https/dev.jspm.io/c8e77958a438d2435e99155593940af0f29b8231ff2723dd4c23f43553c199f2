import { dew as _npmIconvLiteDew } from "/npm:iconv-lite@0.4.24?dew";
import { dew as _supportedNamesJsonDewDew } from "./supported-names.json.dew.js";
import { dew as _labelsToNamesJsonDewDew } from "./labels-to-names.json.dew.js";
var exports = {},
    _dewExec = false;
export function dew() {
  if (_dewExec) return exports;
  _dewExec = true;

  const iconvLite = _npmIconvLiteDew();

  const supportedNames = _supportedNamesJsonDewDew();

  const labelsToNames = _labelsToNamesJsonDewDew();

  const supportedNamesSet = new Set(supportedNames); // https://encoding.spec.whatwg.org/#concept-encoding-get

  exports.labelToName = label => {
    label = String(label).trim().toLowerCase();
    return labelsToNames[label] || null;
  }; // https://encoding.spec.whatwg.org/#decode


  exports.decode = (buffer, fallbackEncodingName) => {
    let encoding = fallbackEncodingName;

    if (!exports.isSupported(encoding)) {
      throw new RangeError(`"${encoding}" is not a supported encoding name`);
    }

    const bomEncoding = exports.getBOMEncoding(buffer);

    if (bomEncoding !== null) {
      encoding = bomEncoding;
    } // iconv-lite will strip BOMs for us, so no need to do the stuff the spec does


    return iconvLite.decode(buffer, encoding);
  }; // https://github.com/whatwg/html/issues/1910#issuecomment-254017369


  exports.getBOMEncoding = buffer => {
    if (buffer[0] === 0xFE && buffer[1] === 0xFF) {
      return "UTF-16BE";
    } else if (buffer[0] === 0xFF && buffer[1] === 0xFE) {
      return "UTF-16LE";
    } else if (buffer[0] === 0xEF && buffer[1] === 0xBB && buffer[2] === 0xBF) {
      return "UTF-8";
    }

    return null;
  };

  exports.isSupported = name => {
    return supportedNamesSet.has(String(name));
  };

  return exports;
}