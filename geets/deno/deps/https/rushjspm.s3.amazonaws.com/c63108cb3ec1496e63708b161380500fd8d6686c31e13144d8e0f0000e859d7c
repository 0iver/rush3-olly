import { dew as _npmWebidlConversions6DewDew } from "/npm:webidl-conversions@6_dew.js";
import { dew as _utilsDewDew } from "./utils.dew.js";
import { dew as _EventTargetDewDew } from "./EventTarget.dew.js";
import { dew as _XMLHttpRequestEventTargetImplDewDew } from "../xhr/XMLHttpRequestEventTarget-impl.dew.js";
var exports = {},
    _dewExec = false;
export function dew() {
  if (_dewExec) return exports;
  _dewExec = true;

  const conversions = _npmWebidlConversions6DewDew();

  const utils = _utilsDewDew();

  const implSymbol = utils.implSymbol;
  const ctorRegistrySymbol = utils.ctorRegistrySymbol;

  const EventTarget = _EventTargetDewDew();

  const interfaceName = "XMLHttpRequestEventTarget";

  exports.is = value => {
    return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;
  };

  exports.isImpl = value => {
    return utils.isObject(value) && value instanceof Impl.implementation;
  };

  exports.convert = (value, {
    context = "The provided value"
  } = {}) => {
    if (exports.is(value)) {
      return utils.implForWrapper(value);
    }

    throw new TypeError(`${context} is not of type 'XMLHttpRequestEventTarget'.`);
  };

  function makeWrapper(globalObject) {
    if (globalObject[ctorRegistrySymbol] === undefined) {
      throw new Error("Internal error: invalid global object");
    }

    const ctor = globalObject[ctorRegistrySymbol]["XMLHttpRequestEventTarget"];

    if (ctor === undefined) {
      throw new Error("Internal error: constructor XMLHttpRequestEventTarget is not installed on the passed global object");
    }

    return Object.create(ctor.prototype);
  }

  exports.create = (globalObject, constructorArgs, privateData) => {
    const wrapper = makeWrapper(globalObject);
    return exports.setup(wrapper, globalObject, constructorArgs, privateData);
  };

  exports.createImpl = (globalObject, constructorArgs, privateData) => {
    const wrapper = exports.create(globalObject, constructorArgs, privateData);
    return utils.implForWrapper(wrapper);
  };

  exports._internalSetup = (wrapper, globalObject) => {
    EventTarget._internalSetup(wrapper, globalObject);
  };

  exports.setup = (wrapper, globalObject, constructorArgs = [], privateData = {}) => {
    privateData.wrapper = wrapper;

    exports._internalSetup(wrapper, globalObject);

    Object.defineProperty(wrapper, implSymbol, {
      value: new Impl.implementation(globalObject, constructorArgs, privateData),
      configurable: true
    });
    wrapper[implSymbol][utils.wrapperSymbol] = wrapper;

    if (Impl.init) {
      Impl.init(wrapper[implSymbol]);
    }

    return wrapper;
  };

  exports.new = globalObject => {
    const wrapper = makeWrapper(globalObject);

    exports._internalSetup(wrapper, globalObject);

    Object.defineProperty(wrapper, implSymbol, {
      value: Object.create(Impl.implementation.prototype),
      configurable: true
    });
    wrapper[implSymbol][utils.wrapperSymbol] = wrapper;

    if (Impl.init) {
      Impl.init(wrapper[implSymbol]);
    }

    return wrapper[implSymbol];
  };

  const exposed = new Set(["Window", "DedicatedWorker", "SharedWorker"]);

  exports.install = (globalObject, globalNames) => {
    if (!globalNames.some(globalName => exposed.has(globalName))) {
      return;
    }

    if (globalObject.EventTarget === undefined) {
      throw new Error("Internal error: attempting to evaluate XMLHttpRequestEventTarget before EventTarget");
    }

    class XMLHttpRequestEventTarget extends globalObject.EventTarget {
      constructor() {
        throw new TypeError("Illegal constructor");
      }

      get onloadstart() {
        const esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onloadstart"]);
      }

      set onloadstart(V) {
        const esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onloadstart"] = V;
      }

      get onprogress() {
        const esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onprogress"]);
      }

      set onprogress(V) {
        const esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onprogress"] = V;
      }

      get onabort() {
        const esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onabort"]);
      }

      set onabort(V) {
        const esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onabort"] = V;
      }

      get onerror() {

        const esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onerror"]);
      }

      set onerror(V) {
        console.log()
        console.trace()
        console.log('set onload');
        const esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onerror"] = V;
      }

      get onload() {
        const esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onload"]);
      }

      set onload(V) {
        console.log()
        console.trace()
        console.log('set onload');
        const esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onload"] = V;
      }

      get ontimeout() {
        const esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["ontimeout"]);
      }

      set ontimeout(V) {
        const esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["ontimeout"] = V;
      }

      get onloadend() {

        const esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onloadend"]);
      }

      set onloadend(V) {
        console.log()
        console.trace()
        console.log('set onloadend');
        const esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onloadend"] = V;
      }

    }

    Object.defineProperties(XMLHttpRequestEventTarget.prototype, {
      onloadstart: {
        enumerable: true
      },
      onprogress: {
        enumerable: true
      },
      onabort: {
        enumerable: true
      },
      onerror: {
        enumerable: true
      },
      onload: {
        enumerable: true
      },
      ontimeout: {
        enumerable: true
      },
      onloadend: {
        enumerable: true
      },
      [Symbol.toStringTag]: {
        value: "XMLHttpRequestEventTarget",
        configurable: true
      }
    });

    if (globalObject[ctorRegistrySymbol] === undefined) {
      globalObject[ctorRegistrySymbol] = Object.create(null);
    }

    globalObject[ctorRegistrySymbol][interfaceName] = XMLHttpRequestEventTarget;
    Object.defineProperty(globalObject, interfaceName, {
      configurable: true,
      writable: true,
      value: XMLHttpRequestEventTarget
    });
  };

  const Impl = _XMLHttpRequestEventTargetImplDewDew();

  return exports;
}