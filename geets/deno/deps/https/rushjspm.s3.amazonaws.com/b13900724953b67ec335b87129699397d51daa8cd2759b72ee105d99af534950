import { dew as _npmWebidlConversions6DewDew } from "/npm:webidl-conversions@6_dew.js";
import { dew as _utilsDewDew } from "./utils.dew.js";
import { dew as _htmlConstructorDewDew } from "../helpers/html-constructor.dew.js";
import { dew as _customElementsDewDew } from "../helpers/custom-elements.dew.js";
import { dew as _documentBaseUrlDewDew } from "../helpers/document-base-url.dew.js";
import { dew as _npmWhatwgUrl8DewDew } from "/npm:whatwg-url@8_dew.js";
import { dew as _HTMLElementDewDew } from "./HTMLElement.dew.js";
import { dew as _HTMLTrackElementImplDewDew } from "../nodes/HTMLTrackElement-impl.dew.js";
var exports = {},
    _dewExec = false;
export function dew() {
  if (_dewExec) return exports;
  _dewExec = true;

  const conversions = _npmWebidlConversions6DewDew();

  const utils = _utilsDewDew();

  const HTMLConstructor_helpers_html_constructor = _htmlConstructorDewDew().HTMLConstructor;

  const ceReactionsPreSteps_helpers_custom_elements = _customElementsDewDew().ceReactionsPreSteps;

  const ceReactionsPostSteps_helpers_custom_elements = _customElementsDewDew().ceReactionsPostSteps;

  const parseURLToResultingURLRecord_helpers_document_base_url = _documentBaseUrlDewDew().parseURLToResultingURLRecord;

  const serializeURLwhatwg_url = _npmWhatwgUrl8DewDew().serializeURL;

  const implSymbol = utils.implSymbol;
  const ctorRegistrySymbol = utils.ctorRegistrySymbol;

  const HTMLElement = _HTMLElementDewDew();

  const interfaceName = "HTMLTrackElement";

  exports.is = value => {
    return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;
  };

  exports.isImpl = value => {
    return utils.isObject(value) && value instanceof Impl.implementation;
  };

  exports.convert = (value, {
    context = "The provided value"
  } = {}) => {
    if (exports.is(value)) {
      return utils.implForWrapper(value);
    }

    throw new TypeError(`${context} is not of type 'HTMLTrackElement'.`);
  };

  function makeWrapper(globalObject) {
    if (globalObject[ctorRegistrySymbol] === undefined) {
      throw new Error("Internal error: invalid global object");
    }

    const ctor = globalObject[ctorRegistrySymbol]["HTMLTrackElement"];

    if (ctor === undefined) {
      throw new Error("Internal error: constructor HTMLTrackElement is not installed on the passed global object");
    }

    return Object.create(ctor.prototype);
  }

  exports.create = (globalObject, constructorArgs, privateData) => {
    const wrapper = makeWrapper(globalObject);
    return exports.setup(wrapper, globalObject, constructorArgs, privateData);
  };

  exports.createImpl = (globalObject, constructorArgs, privateData) => {
    const wrapper = exports.create(globalObject, constructorArgs, privateData);
    return utils.implForWrapper(wrapper);
  };

  exports._internalSetup = (wrapper, globalObject) => {
    HTMLElement._internalSetup(wrapper, globalObject);
  };

  exports.setup = (wrapper, globalObject, constructorArgs = [], privateData = {}) => {
    privateData.wrapper = wrapper;

    exports._internalSetup(wrapper, globalObject);

    Object.defineProperty(wrapper, implSymbol, {
      value: new Impl.implementation(globalObject, constructorArgs, privateData),
      configurable: true
    });
    wrapper[implSymbol][utils.wrapperSymbol] = wrapper;

    if (Impl.init) {
      Impl.init(wrapper[implSymbol]);
    }

    return wrapper;
  };

  exports.new = globalObject => {
    const wrapper = makeWrapper(globalObject);

    exports._internalSetup(wrapper, globalObject);

    Object.defineProperty(wrapper, implSymbol, {
      value: Object.create(Impl.implementation.prototype),
      configurable: true
    });
    wrapper[implSymbol][utils.wrapperSymbol] = wrapper;

    if (Impl.init) {
      Impl.init(wrapper[implSymbol]);
    }

    return wrapper[implSymbol];
  };

  const exposed = new Set(["Window"]);

  exports.install = (globalObject, globalNames) => {
    if (!globalNames.some(globalName => exposed.has(globalName))) {
      return;
    }

    if (globalObject.HTMLElement === undefined) {
      throw new Error("Internal error: attempting to evaluate HTMLTrackElement before HTMLElement");
    }

    class HTMLTrackElement extends globalObject.HTMLElement {
      constructor() {
        return HTMLConstructor_helpers_html_constructor(globalObject, interfaceName, new.target);
      }

      get kind() {
        const esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          const value = esValue[implSymbol].getAttributeNS(null, "kind");
          return value === null ? "" : value;
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }

      set kind(V) {
        const esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["DOMString"](V, {
          context: "Failed to set the 'kind' property on 'HTMLTrackElement': The provided value"
        });
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          esValue[implSymbol].setAttributeNS(null, "kind", V);
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }

      get src() {
        const esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          const value = esValue[implSymbol].getAttributeNS(null, "src");

          if (value === null) {
            return "";
          }

          const urlRecord = parseURLToResultingURLRecord_helpers_document_base_url(value, esValue[implSymbol]._ownerDocument);

          if (urlRecord !== null) {
            return serializeURLwhatwg_url(urlRecord);
          }

          return conversions.USVString(value);
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }

      set src(V) {
        const esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["USVString"](V, {
          context: "Failed to set the 'src' property on 'HTMLTrackElement': The provided value"
        });
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          esValue[implSymbol].setAttributeNS(null, "src", V);
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }

      get srclang() {
        const esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          const value = esValue[implSymbol].getAttributeNS(null, "srclang");
          return value === null ? "" : value;
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }

      set srclang(V) {
        const esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["DOMString"](V, {
          context: "Failed to set the 'srclang' property on 'HTMLTrackElement': The provided value"
        });
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          esValue[implSymbol].setAttributeNS(null, "srclang", V);
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }

      get label() {
        const esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          const value = esValue[implSymbol].getAttributeNS(null, "label");
          return value === null ? "" : value;
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }

      set label(V) {
        const esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["DOMString"](V, {
          context: "Failed to set the 'label' property on 'HTMLTrackElement': The provided value"
        });
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          esValue[implSymbol].setAttributeNS(null, "label", V);
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }

      get default() {
        const esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          return esValue[implSymbol].hasAttributeNS(null, "default");
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }

      set default(V) {
        const esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["boolean"](V, {
          context: "Failed to set the 'default' property on 'HTMLTrackElement': The provided value"
        });
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          if (V) {
            esValue[implSymbol].setAttributeNS(null, "default", "");
          } else {
            esValue[implSymbol].removeAttributeNS(null, "default");
          }
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }

      get readyState() {
        const esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["readyState"];
      }

    }

    Object.defineProperties(HTMLTrackElement.prototype, {
      kind: {
        enumerable: true
      },
      src: {
        enumerable: true
      },
      srclang: {
        enumerable: true
      },
      label: {
        enumerable: true
      },
      default: {
        enumerable: true
      },
      readyState: {
        enumerable: true
      },
      [Symbol.toStringTag]: {
        value: "HTMLTrackElement",
        configurable: true
      },
      NONE: {
        value: 0,
        enumerable: true
      },
      LOADING: {
        value: 1,
        enumerable: true
      },
      LOADED: {
        value: 2,
        enumerable: true
      },
      ERROR: {
        value: 3,
        enumerable: true
      }
    });
    Object.defineProperties(HTMLTrackElement, {
      NONE: {
        value: 0,
        enumerable: true
      },
      LOADING: {
        value: 1,
        enumerable: true
      },
      LOADED: {
        value: 2,
        enumerable: true
      },
      ERROR: {
        value: 3,
        enumerable: true
      }
    });

    if (globalObject[ctorRegistrySymbol] === undefined) {
      globalObject[ctorRegistrySymbol] = Object.create(null);
    }

    globalObject[ctorRegistrySymbol][interfaceName] = HTMLTrackElement;
    Object.defineProperty(globalObject, interfaceName, {
      configurable: true,
      writable: true,
      value: HTMLTrackElement
    });
  };

  const Impl = _HTMLTrackElementImplDewDew();

  return exports;
}