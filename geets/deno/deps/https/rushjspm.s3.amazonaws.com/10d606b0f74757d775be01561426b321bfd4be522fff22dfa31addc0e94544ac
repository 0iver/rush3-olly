import { dew as _npmWebidlConversions6DewDew } from "/npm:webidl-conversions@6_dew.js";
import { dew as _utilsDewDew } from "./utils.dew.js";
import { dew as _EventListenerDewDew } from "./EventListener.dew.js";
import { dew as _AddEventListenerOptionsDewDew } from "./AddEventListenerOptions.dew.js";
import { dew as _EventListenerOptionsDewDew } from "./EventListenerOptions.dew.js";
import { dew as _EventDewDew } from "./Event.dew.js";
import { dew as _EventTargetImplDewDew } from "../events/EventTarget-impl.dew.js";
var exports = {},
    _dewExec = false;
export function dew() {
  if (_dewExec) return exports;
  _dewExec = true;

  const conversions = _npmWebidlConversions6DewDew();

  const utils = _utilsDewDew();

  const EventListener = _EventListenerDewDew();

  const AddEventListenerOptions = _AddEventListenerOptionsDewDew();

  const EventListenerOptions = _EventListenerOptionsDewDew();

  const Event = _EventDewDew();

  const implSymbol = utils.implSymbol;
  const ctorRegistrySymbol = utils.ctorRegistrySymbol;
  const interfaceName = "EventTarget";

  exports.is = value => {
    return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;
  };

  exports.isImpl = value => {
    return utils.isObject(value) && value instanceof Impl.implementation;
  };

  exports.convert = (value, {
    context = "The provided value"
  } = {}) => {
    if (exports.is(value)) {
      return utils.implForWrapper(value);
    }

    throw new TypeError(`${context} is not of type 'EventTarget'.`);
  };

  function makeWrapper(globalObject) {
    if (globalObject[ctorRegistrySymbol] === undefined) {
      throw new Error("Internal error: invalid global object");
    }

    const ctor = globalObject[ctorRegistrySymbol]["EventTarget"];

    if (ctor === undefined) {
      throw new Error("Internal error: constructor EventTarget is not installed on the passed global object");
    }

    return Object.create(ctor.prototype);
  }

  exports.create = (globalObject, constructorArgs, privateData) => {
    const wrapper = makeWrapper(globalObject);
    return exports.setup(wrapper, globalObject, constructorArgs, privateData);
  };

  exports.createImpl = (globalObject, constructorArgs, privateData) => {
    const wrapper = exports.create(globalObject, constructorArgs, privateData);
    return utils.implForWrapper(wrapper);
  };

  exports._internalSetup = (wrapper, globalObject) => {};

  exports.setup = (wrapper, globalObject, constructorArgs = [], privateData = {}) => {
    privateData.wrapper = wrapper;

    exports._internalSetup(wrapper, globalObject);

    Object.defineProperty(wrapper, implSymbol, {
      value: new Impl.implementation(globalObject, constructorArgs, privateData),
      configurable: true
    });
    wrapper[implSymbol][utils.wrapperSymbol] = wrapper;

    if (Impl.init) {
      Impl.init(wrapper[implSymbol]);
    }

    return wrapper;
  };

  exports.new = globalObject => {
    const wrapper = makeWrapper(globalObject);

    exports._internalSetup(wrapper, globalObject);

    Object.defineProperty(wrapper, implSymbol, {
      value: Object.create(Impl.implementation.prototype),
      configurable: true
    });
    wrapper[implSymbol][utils.wrapperSymbol] = wrapper;

    if (Impl.init) {
      Impl.init(wrapper[implSymbol]);
    }

    return wrapper[implSymbol];
  };

  const exposed = new Set(["Window", "Worker", "AudioWorklet"]);

  exports.install = (globalObject, globalNames) => {
    if (!globalNames.some(globalName => exposed.has(globalName))) {
      return;
    }

    class EventTarget {
      constructor() {
        return exports.setup(Object.create(new.target.prototype), globalObject, undefined);
      }

      addEventListener(type, callback) {
        const esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 2) {
          throw new TypeError("Failed to execute 'addEventListener' on 'EventTarget': 2 arguments required, but only " + arguments.length + " present.");
        }

        const args = [];
        {
          let curArg = arguments[0];
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'addEventListener' on 'EventTarget': parameter 1"
          });
          args.push(curArg);
        }
        {
          let curArg = arguments[1];

          if (curArg === null || curArg === undefined) {
            curArg = null;
          } else {
            curArg = EventListener.convert(curArg, {
              context: "Failed to execute 'addEventListener' on 'EventTarget': parameter 2"
            });
          }

          args.push(curArg);
        }
        {
          let curArg = arguments[2];

          if (curArg !== undefined) {
            if (curArg === null || curArg === undefined) {
              curArg = AddEventListenerOptions.convert(curArg, {
                context: "Failed to execute 'addEventListener' on 'EventTarget': parameter 3"
              });
            } else if (utils.isObject(curArg)) {
              curArg = AddEventListenerOptions.convert(curArg, {
                context: "Failed to execute 'addEventListener' on 'EventTarget': parameter 3" + " dictionary"
              });
            } else if (typeof curArg === "boolean") {
              curArg = conversions["boolean"](curArg, {
                context: "Failed to execute 'addEventListener' on 'EventTarget': parameter 3"
              });
            } else {
              curArg = conversions["boolean"](curArg, {
                context: "Failed to execute 'addEventListener' on 'EventTarget': parameter 3"
              });
            }
          }

          args.push(curArg);
        }
        return esValue[implSymbol].addEventListener(...args);
      }

      removeEventListener(type, callback) {
        const esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 2) {
          throw new TypeError("Failed to execute 'removeEventListener' on 'EventTarget': 2 arguments required, but only " + arguments.length + " present.");
        }

        const args = [];
        {
          let curArg = arguments[0];
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'removeEventListener' on 'EventTarget': parameter 1"
          });
          args.push(curArg);
        }
        {
          let curArg = arguments[1];

          if (curArg === null || curArg === undefined) {
            curArg = null;
          } else {
            curArg = EventListener.convert(curArg, {
              context: "Failed to execute 'removeEventListener' on 'EventTarget': parameter 2"
            });
          }

          args.push(curArg);
        }
        {
          let curArg = arguments[2];

          if (curArg !== undefined) {
            if (curArg === null || curArg === undefined) {
              curArg = EventListenerOptions.convert(curArg, {
                context: "Failed to execute 'removeEventListener' on 'EventTarget': parameter 3"
              });
            } else if (utils.isObject(curArg)) {
              curArg = EventListenerOptions.convert(curArg, {
                context: "Failed to execute 'removeEventListener' on 'EventTarget': parameter 3" + " dictionary"
              });
            } else if (typeof curArg === "boolean") {
              curArg = conversions["boolean"](curArg, {
                context: "Failed to execute 'removeEventListener' on 'EventTarget': parameter 3"
              });
            } else {
              curArg = conversions["boolean"](curArg, {
                context: "Failed to execute 'removeEventListener' on 'EventTarget': parameter 3"
              });
            }
          }

          args.push(curArg);
        }
        return esValue[implSymbol].removeEventListener(...args);
      }

      dispatchEvent(event) {
        const esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'dispatchEvent' on 'EventTarget': 1 argument required, but only " + arguments.length + " present.");
        }

        const args = [];
        {
          let curArg = arguments[0];
          curArg = Event.convert(curArg, {
            context: "Failed to execute 'dispatchEvent' on 'EventTarget': parameter 1"
          });
          args.push(curArg);
        }
        return esValue[implSymbol].dispatchEvent(...args);
      }

    }

    Object.defineProperties(EventTarget.prototype, {
      addEventListener: {
        enumerable: true
      },
      removeEventListener: {
        enumerable: true
      },
      dispatchEvent: {
        enumerable: true
      },
      [Symbol.toStringTag]: {
        value: "EventTarget",
        configurable: true
      }
    });

    if (globalObject[ctorRegistrySymbol] === undefined) {
      globalObject[ctorRegistrySymbol] = Object.create(null);
    }

    globalObject[ctorRegistrySymbol][interfaceName] = EventTarget;
    Object.defineProperty(globalObject, interfaceName, {
      configurable: true,
      writable: true,
      value: EventTarget
    });
  };

  const Impl = _EventTargetImplDewDew();

  return exports;
}