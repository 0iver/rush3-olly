import { dew as _HTMLElementImplDewDew } from "./HTMLElement-impl.dew.js";
import { dew as _DefaultConstraintValidationImplDewDew } from "../constraint-validation/DefaultConstraintValidation-impl.dew.js";
import { dew as _utilsDewDew } from "../../utils.dew.js";
import { dew as _formControlsDewDew } from "../helpers/form-controls.dew.js";
import { dew as _stringsDewDew } from "../helpers/strings.dew.js";
var exports = {},
    _dewExec = false;
export function dew() {
  if (_dewExec) return exports;
  _dewExec = true;

  const HTMLElementImpl = _HTMLElementImplDewDew().implementation;

  const DefaultConstraintValidationImpl = _DefaultConstraintValidationImplDewDew().implementation;

  const {
    mixin
  } = _utilsDewDew();

  const {
    isDisabled,
    formOwner,
    getLabelsForLabelable
  } = _formControlsDewDew();

  const {
    asciiLowercase
  } = _stringsDewDew();

  class HTMLButtonElementImpl extends HTMLElementImpl {
    constructor(globalObject, args, privateData) {
      super(globalObject, args, privateData);
      this._customValidityErrorMessage = "";
      this._labels = null;
      this._hasActivationBehavior = true;
    }

    _activationBehavior() {
      const {
        form
      } = this;

      if (form && !isDisabled(this)) {
        if (this.type === "submit") {
          form._doSubmit();
        }

        if (this.type === "reset") {
          form._doReset();
        }
      }
    }

    _getValue() {
      const valueAttr = this.getAttributeNS(null, "value");
      return valueAttr === null ? "" : valueAttr;
    }

    get labels() {
      return getLabelsForLabelable(this);
    }

    get form() {
      return formOwner(this);
    }

    get type() {
      const typeAttr = asciiLowercase(this.getAttributeNS(null, "type") || "");

      switch (typeAttr) {
        case "submit":
        case "reset":
        case "button":
          return typeAttr;

        default:
          return "submit";
      }
    }

    set type(v) {
      v = asciiLowercase(String(v));

      switch (v) {
        case "submit":
        case "reset":
        case "button":
          this.setAttributeNS(null, "type", v);
          break;

        default:
          this.setAttributeNS(null, "type", "submit");
          break;
      }
    }

    _barredFromConstraintValidationSpecialization() {
      return this.type === "reset" || this.type === "button";
    }

  }

  mixin(HTMLButtonElementImpl.prototype, DefaultConstraintValidationImpl.prototype);
  exports = {
    implementation: HTMLButtonElementImpl
  };
  return exports;
}