import { dew as _HTMLCollectionDewDew } from "../generated/HTMLCollection.dew.js";
import { dew as _HTMLElementImplDewDew } from "./HTMLElement-impl.dew.js";
import { dew as _DefaultConstraintValidationImplDewDew } from "../constraint-validation/DefaultConstraintValidation-impl.dew.js";
import { dew as _formControlsDewDew } from "../helpers/form-controls.dew.js";
import { dew as _utilsDewDew } from "../../utils.dew.js";
import { dew as _traversalDewDew } from "../helpers/traversal.dew.js";
var exports = {},
    _dewExec = false;
export function dew() {
  if (_dewExec) return exports;
  _dewExec = true;

  const HTMLCollection = _HTMLCollectionDewDew();

  const HTMLElementImpl = _HTMLElementImplDewDew().implementation;

  const DefaultConstraintValidationImpl = _DefaultConstraintValidationImplDewDew().implementation;

  const {
    formOwner
  } = _formControlsDewDew();

  const {
    mixin
  } = _utilsDewDew();

  const {
    descendantsByLocalNames
  } = _traversalDewDew();

  const listedElements = new Set(["button", "fieldset", "input", "object", "output", "select", "textarea"]);

  class HTMLFieldSetElementImpl extends HTMLElementImpl {
    constructor(globalObject, args, privateData) {
      super(globalObject, args, privateData);
      this._customValidityErrorMessage = "";
    }

    get elements() {
      return HTMLCollection.createImpl(this._globalObject, [], {
        element: this,
        query: () => descendantsByLocalNames(this, listedElements)
      });
    }

    get form() {
      return formOwner(this);
    }

    get type() {
      return "fieldset";
    }

    _barredFromConstraintValidationSpecialization() {
      return true;
    }

  }

  mixin(HTMLFieldSetElementImpl.prototype, DefaultConstraintValidationImpl.prototype);
  exports = {
    implementation: HTMLFieldSetElementImpl
  };
  return exports;
}