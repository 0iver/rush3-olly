import { dew as _npmAssertPlus1DewDew } from "/npm:assert-plus@1_dew.js";
import { dew as _npmSaferBuffer2DewDew } from "/npm:safer-buffer@2_dew.js";
import { dew as _rfc4253DewDew } from "./rfc4253.dew.js";
import { dew as _keyDewDew } from "../key.dew.js";
import { dew as _errorsDewDew } from "../errors.dew.js";
var exports = {},
    _dewExec = false;
export function dew() {
  if (_dewExec) return exports;
  _dewExec = true;
  // Copyright 2018 Joyent, Inc.
  exports = {
    read: read,
    write: write
  };

  var assert = _npmAssertPlus1DewDew();

  var Buffer = _npmSaferBuffer2DewDew().Buffer;

  var rfc4253 = _rfc4253DewDew();

  var Key = _keyDewDew();

  var errors = _errorsDewDew();

  function read(buf, options) {
    var lines = buf.toString('ascii').split(/[\r\n]+/);
    var found = false;
    var parts;
    var si = 0;

    while (si < lines.length) {
      parts = splitHeader(lines[si++]);

      if (parts && parts[0].toLowerCase() === 'putty-user-key-file-2') {
        found = true;
        break;
      }
    }

    if (!found) {
      throw new Error('No PuTTY format first line found');
    }

    var alg = parts[1];
    parts = splitHeader(lines[si++]);
    assert.equal(parts[0].toLowerCase(), 'encryption');
    parts = splitHeader(lines[si++]);
    assert.equal(parts[0].toLowerCase(), 'comment');
    var comment = parts[1];
    parts = splitHeader(lines[si++]);
    assert.equal(parts[0].toLowerCase(), 'public-lines');
    var publicLines = parseInt(parts[1], 10);

    if (!isFinite(publicLines) || publicLines < 0 || publicLines > lines.length) {
      throw new Error('Invalid public-lines count');
    }

    var publicBuf = Buffer.from(lines.slice(si, si + publicLines).join(''), 'base64');
    var keyType = rfc4253.algToKeyType(alg);
    var key = rfc4253.read(publicBuf);

    if (key.type !== keyType) {
      throw new Error('Outer key algorithm mismatch');
    }

    key.comment = comment;
    return key;
  }

  function splitHeader(line) {
    var idx = line.indexOf(':');
    if (idx === -1) return null;
    var header = line.slice(0, idx);
    ++idx;

    while (line[idx] === ' ') ++idx;

    var rest = line.slice(idx);
    return [header, rest];
  }

  function write(key, options) {
    assert.object(key);
    if (!Key.isKey(key)) throw new Error('Must be a public key');
    var alg = rfc4253.keyTypeToAlg(key);
    var buf = rfc4253.write(key);
    var comment = key.comment || '';
    var b64 = buf.toString('base64');
    var lines = wrap(b64, 64);
    lines.unshift('Public-Lines: ' + lines.length);
    lines.unshift('Comment: ' + comment);
    lines.unshift('Encryption: none');
    lines.unshift('PuTTY-User-Key-File-2: ' + alg);
    return Buffer.from(lines.join('\n') + '\n');
  }

  function wrap(txt, len) {
    var lines = [];
    var pos = 0;

    while (pos < txt.length) {
      lines.push(txt.slice(pos, pos + 64));
      pos += 64;
    }

    return lines;
  }

  return exports;
}