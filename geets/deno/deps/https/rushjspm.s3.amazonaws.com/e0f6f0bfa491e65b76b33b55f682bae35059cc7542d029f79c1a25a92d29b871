import { dew as _DOMTokenListDewDew } from "../generated/DOMTokenList.dew.js";
import { dew as _HTMLElementImplDewDew } from "./HTMLElement-impl.dew.js";
import { dew as _utilsDewDew } from "../generated/utils.dew.js";
import { dew as _stylesheetsDewDew } from "../helpers/stylesheets.dew.js";
import { dew as _documentBaseUrlDewDew } from "../helpers/document-base-url.dew.js";
import { dew as _npmWhatwgUrl8DewDew } from "/npm:whatwg-url@8_dew.js";
var exports = {},
    _dewExec = false;
export function dew() {
  if (_dewExec) return exports;
  _dewExec = true;

  const DOMTokenList = _DOMTokenListDewDew();

  const HTMLElementImpl = _HTMLElementImplDewDew().implementation;

  const idlUtils = _utilsDewDew();

  const {
    fetchStylesheet
  } = _stylesheetsDewDew();

  const {
    parseURLToResultingURLRecord
  } = _documentBaseUrlDewDew();

  const whatwgURL = _npmWhatwgUrl8DewDew(); // Important reading: "appropriate times to obtain the resource" in
  // https://html.spec.whatwg.org/multipage/semantics.html#link-type-stylesheet


  class HTMLLinkElementImpl extends HTMLElementImpl {
    constructor(globalObject, args, privateData) {
      super(globalObject, args, privateData);
      this.sheet = null;
    }

    get relList() {
      if (this._relList === undefined) {
        this._relList = DOMTokenList.createImpl(this._globalObject, [], {
          element: this,
          attributeLocalName: "rel",
          supportedTokens: new Set(["stylesheet"])
        });
      }

      return this._relList;
    }

    _attach() {
      super._attach();

      maybeFetchAndProcess(this);
    }

    _attrModified(name, value, oldValue) {
      super._attrModified(name, value, oldValue);

      if (name === "href") {
        // TODO crossorigin="" or type=""
        maybeFetchAndProcess(this);
      }

      if (name === "rel" && this._relList !== undefined) {
        this._relList.attrModified();
      }
    }

    get _accept() {
      return "text/css,*/*;q=0.1";
    }

  }

  exports = {
    implementation: HTMLLinkElementImpl
  }; // https://html.spec.whatwg.org/multipage/links.html#link-type-stylesheet

  function maybeFetchAndProcess(el) {
    if (!isExternalResourceLink(el)) {
      return;
    } // Browsing-context connected


    if (!el.isConnected || !el._ownerDocument._defaultView) {
      return;
    }

    fetchAndProcess(el);
  } // https://html.spec.whatwg.org/multipage/semantics.html#default-fetch-and-process-the-linked-resource
  // TODO: refactor into general link-fetching like the spec.


  function fetchAndProcess(el) {
    const href = el.getAttributeNS(null, "href");

    if (href === null || href === "") {
      return;
    }

    const url = parseURLToResultingURLRecord(href, el._ownerDocument);

    if (url === null) {
      return;
    } // TODO handle crossorigin="", nonce, integrity="", referrerpolicy=""


    const serialized = whatwgURL.serializeURL(url);
    fetchStylesheet(el, serialized);
  }

  function isExternalResourceLink(el) {
    // for our purposes, only stylesheets can be external resource links
    const wrapper = idlUtils.wrapperForImpl(el);

    if (!/(?:[ \t\n\r\f]|^)stylesheet(?:[ \t\n\r\f]|$)/i.test(wrapper.rel)) {
      // rel is a space-separated list of tokens, and the original rel types
      // are case-insensitive.
      return false;
    }

    return el.hasAttributeNS(null, "href");
  }

  return exports;
}