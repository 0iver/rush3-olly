import { dew as _SlotableImplDewDew } from "./Slotable-impl.dew.js";
import { dew as _CharacterDataImplDewDew } from "./CharacterData-impl.dew.js";
import { dew as _internalConstantsDewDew } from "../helpers/internal-constants.dew.js";
import { dew as _webidl2jsWrapperDewDew } from "/npm:domexception@2/webidl2js-wrapper_dew.js";
import { dew as _nodeTypeDewDew } from "../node-type.dew.js";
import { dew as _utilsDewDew } from "../../utils.dew.js";
var exports = {},
    _dewExec = false;
export function dew() {
  if (_dewExec) return exports;
  _dewExec = true;

  const SlotableMixinImpl = _SlotableImplDewDew().implementation;

  const CharacterDataImpl = _CharacterDataImplDewDew().implementation;

  const {
    domSymbolTree
  } = _internalConstantsDewDew();

  const DOMException = _webidl2jsWrapperDewDew();

  const NODE_TYPE = _nodeTypeDewDew();

  const {
    mixin
  } = _utilsDewDew(); // https://dom.spec.whatwg.org/#text


  class TextImpl extends CharacterDataImpl {
    constructor(globalObject, args, privateData) {
      super(globalObject, args, {
        data: args[0],
        ...privateData
      });

      this._initSlotableMixin();

      this.nodeType = NODE_TYPE.TEXT_NODE;
    } // https://dom.spec.whatwg.org/#dom-text-splittext
    // https://dom.spec.whatwg.org/#concept-text-split


    splitText(offset) {
      const {
        length
      } = this;

      if (offset > length) {
        throw DOMException.create(this._globalObject, ["The index is not in the allowed range.", "IndexSizeError"]);
      }

      const count = length - offset;
      const newData = this.substringData(offset, count);

      const newNode = this._ownerDocument.createTextNode(newData);

      const parent = domSymbolTree.parent(this);

      if (parent !== null) {
        parent._insert(newNode, this.nextSibling);

        for (const range of this._referencedRanges) {
          const {
            _start,
            _end
          } = range;

          if (_start.node === this && _start.offset > offset) {
            range._setLiveRangeStart(newNode, _start.offset - offset);
          }

          if (_end.node === this && _end.offset > offset) {
            range._setLiveRangeEnd(newNode, _end.offset - offset);
          }
        }

        const nodeIndex = domSymbolTree.index(this);

        for (const range of parent._referencedRanges) {
          const {
            _start,
            _end
          } = range;

          if (_start.node === parent && _start.offset === nodeIndex + 1) {
            range._setLiveRangeStart(parent, _start.offset + 1);
          }

          if (_end.node === parent && _end.offset === nodeIndex + 1) {
            range._setLiveRangeEnd(parent, _end.offset + 1);
          }
        }
      }

      this.replaceData(offset, count, "");
      return newNode;
    } // https://dom.spec.whatwg.org/#dom-text-wholetext


    get wholeText() {
      let wholeText = this.textContent;
      let next;
      let current = this;

      while ((next = domSymbolTree.previousSibling(current)) && next.nodeType === NODE_TYPE.TEXT_NODE) {
        wholeText = next.textContent + wholeText;
        current = next;
      }

      current = this;

      while ((next = domSymbolTree.nextSibling(current)) && next.nodeType === NODE_TYPE.TEXT_NODE) {
        wholeText += next.textContent;
        current = next;
      }

      return wholeText;
    }

  }

  mixin(TextImpl.prototype, SlotableMixinImpl.prototype);
  exports = {
    implementation: TextImpl
  };
  return exports;
}