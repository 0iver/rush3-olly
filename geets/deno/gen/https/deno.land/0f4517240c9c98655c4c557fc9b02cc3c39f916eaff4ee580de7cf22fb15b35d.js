export var LogLevels;
(function(LogLevels) {
    LogLevels[LogLevels["NOTSET"] = 0] = "NOTSET";
    LogLevels[LogLevels["DEBUG"] = 10] = "DEBUG";
    LogLevels[LogLevels["INFO"] = 20] = "INFO";
    LogLevels[LogLevels["WARNING"] = 30] = "WARNING";
    LogLevels[LogLevels["ERROR"] = 40] = "ERROR";
    LogLevels[LogLevels["CRITICAL"] = 50] = "CRITICAL";
})(LogLevels || (LogLevels = {
}));
/** Permitted log level names */ export const LogLevelNames = Object.keys(LogLevels).filter((key)=>isNaN(Number(key))
);
const byLevel = {
    [String(LogLevels.NOTSET)]: "NOTSET",
    [String(LogLevels.DEBUG)]: "DEBUG",
    [String(LogLevels.INFO)]: "INFO",
    [String(LogLevels.WARNING)]: "WARNING",
    [String(LogLevels.ERROR)]: "ERROR",
    [String(LogLevels.CRITICAL)]: "CRITICAL"
};
/** Returns the numeric log level associated with the passed,
 * stringy log level name.
 */ export function getLevelByName(name) {
    switch(name){
        case "NOTSET":
            return LogLevels.NOTSET;
        case "DEBUG":
            return LogLevels.DEBUG;
        case "INFO":
            return LogLevels.INFO;
        case "WARNING":
            return LogLevels.WARNING;
        case "ERROR":
            return LogLevels.ERROR;
        case "CRITICAL":
            return LogLevels.CRITICAL;
        default:
            throw new Error(`no log level found for "${name}"`);
    }
}
/** Returns the stringy log level name provided the numeric log level */ export function getLevelName(level) {
    const levelName = byLevel[level];
    if (levelName) {
        return levelName;
    }
    throw new Error(`no level name found for level: ${level}`);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIjxodHRwczovL2Rlbm8ubGFuZC9zdGRAMC42OS4wL2xvZy9sZXZlbHMudHM+Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE4LTIwMjAgdGhlIERlbm8gYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4gTUlUIGxpY2Vuc2UuXG4vKiogR2V0IGxvZyBsZXZlbCBudW1lcmljIHZhbHVlcyB0aHJvdWdoIGVudW0gY29uc3RhbnRzXG4gKi9cbmV4cG9ydCBlbnVtIExvZ0xldmVscyB7XG4gIE5PVFNFVCA9IDAsXG4gIERFQlVHID0gMTAsXG4gIElORk8gPSAyMCxcbiAgV0FSTklORyA9IDMwLFxuICBFUlJPUiA9IDQwLFxuICBDUklUSUNBTCA9IDUwLFxufVxuXG4vKiogUGVybWl0dGVkIGxvZyBsZXZlbCBuYW1lcyAqL1xuZXhwb3J0IGNvbnN0IExvZ0xldmVsTmFtZXMgPSBPYmplY3Qua2V5cyhMb2dMZXZlbHMpLmZpbHRlcigoa2V5KSA9PlxuICBpc05hTihOdW1iZXIoa2V5KSlcbik7XG5cbi8qKiBVbmlvbiBvZiB2YWxpZCBsb2cgbGV2ZWwgc3RyaW5ncyAqL1xuZXhwb3J0IHR5cGUgTGV2ZWxOYW1lID0ga2V5b2YgdHlwZW9mIExvZ0xldmVscztcblxuY29uc3QgYnlMZXZlbDogUmVjb3JkPHN0cmluZywgTGV2ZWxOYW1lPiA9IHtcbiAgW1N0cmluZyhMb2dMZXZlbHMuTk9UU0VUKV06IFwiTk9UU0VUXCIsXG4gIFtTdHJpbmcoTG9nTGV2ZWxzLkRFQlVHKV06IFwiREVCVUdcIixcbiAgW1N0cmluZyhMb2dMZXZlbHMuSU5GTyldOiBcIklORk9cIixcbiAgW1N0cmluZyhMb2dMZXZlbHMuV0FSTklORyldOiBcIldBUk5JTkdcIixcbiAgW1N0cmluZyhMb2dMZXZlbHMuRVJST1IpXTogXCJFUlJPUlwiLFxuICBbU3RyaW5nKExvZ0xldmVscy5DUklUSUNBTCldOiBcIkNSSVRJQ0FMXCIsXG59O1xuXG4vKiogUmV0dXJucyB0aGUgbnVtZXJpYyBsb2cgbGV2ZWwgYXNzb2NpYXRlZCB3aXRoIHRoZSBwYXNzZWQsXG4gKiBzdHJpbmd5IGxvZyBsZXZlbCBuYW1lLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TGV2ZWxCeU5hbWUobmFtZTogTGV2ZWxOYW1lKTogbnVtYmVyIHtcbiAgc3dpdGNoIChuYW1lKSB7XG4gICAgY2FzZSBcIk5PVFNFVFwiOlxuICAgICAgcmV0dXJuIExvZ0xldmVscy5OT1RTRVQ7XG4gICAgY2FzZSBcIkRFQlVHXCI6XG4gICAgICByZXR1cm4gTG9nTGV2ZWxzLkRFQlVHO1xuICAgIGNhc2UgXCJJTkZPXCI6XG4gICAgICByZXR1cm4gTG9nTGV2ZWxzLklORk87XG4gICAgY2FzZSBcIldBUk5JTkdcIjpcbiAgICAgIHJldHVybiBMb2dMZXZlbHMuV0FSTklORztcbiAgICBjYXNlIFwiRVJST1JcIjpcbiAgICAgIHJldHVybiBMb2dMZXZlbHMuRVJST1I7XG4gICAgY2FzZSBcIkNSSVRJQ0FMXCI6XG4gICAgICByZXR1cm4gTG9nTGV2ZWxzLkNSSVRJQ0FMO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYG5vIGxvZyBsZXZlbCBmb3VuZCBmb3IgXCIke25hbWV9XCJgKTtcbiAgfVxufVxuXG4vKiogUmV0dXJucyB0aGUgc3RyaW5neSBsb2cgbGV2ZWwgbmFtZSBwcm92aWRlZCB0aGUgbnVtZXJpYyBsb2cgbGV2ZWwgKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRMZXZlbE5hbWUobGV2ZWw6IG51bWJlcik6IExldmVsTmFtZSB7XG4gIGNvbnN0IGxldmVsTmFtZSA9IGJ5TGV2ZWxbbGV2ZWxdO1xuICBpZiAobGV2ZWxOYW1lKSB7XG4gICAgcmV0dXJuIGxldmVsTmFtZTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoYG5vIGxldmVsIG5hbWUgZm91bmQgZm9yIGxldmVsOiAke2xldmVsfWApO1xufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJXQUdBLFNBQUE7VUFBQSxTQUFBO0FBQUEsYUFBQSxDQUFBLFNBQUEsRUFDQSxNQUFBLEtBQUEsQ0FBQSxLQUFBLE1BQUE7QUFEQSxhQUFBLENBQUEsU0FBQSxFQUVBLEtBQUEsS0FBQSxFQUFBLEtBQUEsS0FBQTtBQUZBLGFBQUEsQ0FBQSxTQUFBLEVBR0EsSUFBQSxLQUFBLEVBQUEsS0FBQSxJQUFBO0FBSEEsYUFBQSxDQUFBLFNBQUEsRUFJQSxPQUFBLEtBQUEsRUFBQSxLQUFBLE9BQUE7QUFKQSxhQUFBLENBQUEsU0FBQSxFQUtBLEtBQUEsS0FBQSxFQUFBLEtBQUEsS0FBQTtBQUxBLGFBQUEsQ0FBQSxTQUFBLEVBTUEsUUFBQSxLQUFBLEVBQUEsS0FBQSxRQUFBO0dBTkEsU0FBQSxLQUFBLFNBQUE7O0FBU0EsRUFBQSw0QkFBQSxFQUFBLGNBQ0EsYUFBQSxHQUFBLE1BQUEsQ0FBQSxJQUFBLENBQUEsU0FBQSxFQUFBLE1BQUEsRUFBQSxHQUFBLEdBQ0EsS0FBQSxDQUFBLE1BQUEsQ0FBQSxHQUFBOztNQU1BLE9BQUE7S0FDQSxNQUFBLENBQUEsU0FBQSxDQUFBLE1BQUEsS0FBQSxNQUFBO0tBQ0EsTUFBQSxDQUFBLFNBQUEsQ0FBQSxLQUFBLEtBQUEsS0FBQTtLQUNBLE1BQUEsQ0FBQSxTQUFBLENBQUEsSUFBQSxLQUFBLElBQUE7S0FDQSxNQUFBLENBQUEsU0FBQSxDQUFBLE9BQUEsS0FBQSxPQUFBO0tBQ0EsTUFBQSxDQUFBLFNBQUEsQ0FBQSxLQUFBLEtBQUEsS0FBQTtLQUNBLE1BQUEsQ0FBQSxTQUFBLENBQUEsUUFBQSxLQUFBLFFBQUE7O0FBR0EsRUFFQSxBQUZBLHdGQUVBLEFBRkEsRUFFQSxpQkFDQSxjQUFBLENBQUEsSUFBQTtXQUNBLElBQUE7Y0FDQSxNQUFBO21CQUNBLFNBQUEsQ0FBQSxNQUFBO2NBQ0EsS0FBQTttQkFDQSxTQUFBLENBQUEsS0FBQTtjQUNBLElBQUE7bUJBQ0EsU0FBQSxDQUFBLElBQUE7Y0FDQSxPQUFBO21CQUNBLFNBQUEsQ0FBQSxPQUFBO2NBQ0EsS0FBQTttQkFDQSxTQUFBLENBQUEsS0FBQTtjQUNBLFFBQUE7bUJBQ0EsU0FBQSxDQUFBLFFBQUE7O3NCQUVBLEtBQUEsRUFBQSx3QkFBQSxFQUFBLElBQUEsQ0FBQSxDQUFBOzs7QUFJQSxFQUFBLG9FQUFBLEVBQUEsaUJBQ0EsWUFBQSxDQUFBLEtBQUE7VUFDQSxTQUFBLEdBQUEsT0FBQSxDQUFBLEtBQUE7UUFDQSxTQUFBO2VBQ0EsU0FBQTs7Y0FFQSxLQUFBLEVBQUEsK0JBQUEsRUFBQSxLQUFBIn0=