import { createHash, exists, log, path } from "./deps.ts";
const os = Deno.build.os;
const PLUGIN_SUFFIX_MAP = {
    darwin: ".dylib",
    linux: ".so",
    windows: ".dll"
};
const pluginSuffix = PLUGIN_SUFFIX_MAP[os];
const defaultCacheDir = Deno.env.get("DENO_PLUGIN_DIR") ?? ".deno_plugins";
export async function download(options) {
    const { name , urls , checkCache =true  } = options;
    const cacheDir = options.cacheDir ?? defaultCacheDir;
    const remoteUrl = urls[os];
    const md5 = createHash("md5");
    md5.update(remoteUrl + pluginSuffix);
    const remoteHash = md5.toString("hex");
    const cacheFileName = `${name}_${remoteHash}${pluginSuffix}`;
    const localPath = path.resolve(cacheDir, cacheFileName);
    if (!await exists(localPath) || !checkCache) {
        if (!remoteUrl) {
            throw Error(`"${name}" plugin does not provide binaries suitable for the current system`);
        }
        await Deno.mkdir(cacheDir, {
            recursive: true
        });
        if (remoteUrl.startsWith("file://")) {
            const fromPath = path.resolve(remoteUrl.slice(7));
            await copyFromLocal(name, fromPath, localPath);
        } else {
            await downloadFromRemote(name, remoteUrl, localPath);
        }
    }
    return localPath;
}
export async function prepare(options) {
    const { name , printLog =true  } = options;
    if (printLog) {
        await log.setup({
        });
    }
    const localPath = await download(options);
    log.info(`load deno plugin "${name}" from local "${localPath}"`);
    return Deno.openPlugin(localPath);
}
async function downloadFromRemote(name, remoteUrl, savePath) {
    log.info(`downloading deno plugin "${name}" from "${remoteUrl}"`);
    const download = await fetch(remoteUrl);
    if (download.status !== 200) {
        throw Error(`downloading plugin "${name}" from "${remoteUrl}" failed.`);
    }
    const pluginFileData = await download.arrayBuffer();
    await Deno.writeFile(savePath, new Uint8Array(pluginFileData));
}
async function copyFromLocal(name, from, to) {
    log.info(`copy deno plugin "${name}" from "${from}"`);
    if (!await exists(from)) {
        throw Error(`copy plugin "${name}" from "${from}" failed, ${from} does not exist.`);
    }
    await Deno.copyFile(from, to);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIjxodHRwczovL2Rlbm8ubGFuZC94L3BsdWdpbl9wcmVwYXJlQHYwLjguMC9tb2QudHM+Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUhhc2gsIGV4aXN0cywgbG9nLCBwYXRoIH0gZnJvbSBcIi4vZGVwcy50c1wiO1xuXG5jb25zdCBvcyA9IERlbm8uYnVpbGQub3M7XG5cbmNvbnN0IFBMVUdJTl9TVUZGSVhfTUFQOiB7IFtvcyBpbiB0eXBlb2YgRGVuby5idWlsZC5vc106IHN0cmluZyB9ID0ge1xuICBkYXJ3aW46IFwiLmR5bGliXCIsXG4gIGxpbnV4OiBcIi5zb1wiLFxuICB3aW5kb3dzOiBcIi5kbGxcIixcbn07XG5cbmNvbnN0IHBsdWdpblN1ZmZpeCA9IFBMVUdJTl9TVUZGSVhfTUFQW29zXTtcblxuZXhwb3J0IGludGVyZmFjZSBQcmVwYXJlT3B0aW9ucyB7XG4gIG5hbWU6IHN0cmluZztcbiAgcHJpbnRMb2c/OiBib29sZWFuO1xuICBjaGVja0NhY2hlPzogYm9vbGVhbjtcbiAgY2FjaGVEaXI/OiBzdHJpbmc7XG4gIHVybHM6IHtcbiAgICBkYXJ3aW4/OiBzdHJpbmc7XG4gICAgbGludXg/OiBzdHJpbmc7XG4gICAgd2luZG93cz86IHN0cmluZztcbiAgfTtcbn1cblxuY29uc3QgZGVmYXVsdENhY2hlRGlyID0gRGVuby5lbnYuZ2V0KFwiREVOT19QTFVHSU5fRElSXCIpID8/IFwiLmRlbm9fcGx1Z2luc1wiO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZG93bmxvYWQob3B0aW9uczogUHJlcGFyZU9wdGlvbnMpOiBQcm9taXNlPHN0cmluZz4ge1xuICBjb25zdCB7IG5hbWUsIHVybHMsIGNoZWNrQ2FjaGUgPSB0cnVlIH0gPSBvcHRpb25zO1xuXG4gIGNvbnN0IGNhY2hlRGlyID0gb3B0aW9ucy5jYWNoZURpciA/PyBkZWZhdWx0Q2FjaGVEaXI7XG4gIGNvbnN0IHJlbW90ZVVybCA9IHVybHNbb3NdO1xuICBjb25zdCBtZDUgPSBjcmVhdGVIYXNoKFwibWQ1XCIpO1xuICBtZDUudXBkYXRlKHJlbW90ZVVybCArIHBsdWdpblN1ZmZpeCk7XG4gIGNvbnN0IHJlbW90ZUhhc2ggPSBtZDUudG9TdHJpbmcoXCJoZXhcIik7XG4gIGNvbnN0IGNhY2hlRmlsZU5hbWUgPSBgJHtuYW1lfV8ke3JlbW90ZUhhc2h9JHtwbHVnaW5TdWZmaXh9YDtcbiAgY29uc3QgbG9jYWxQYXRoID0gcGF0aC5yZXNvbHZlKGNhY2hlRGlyLCBjYWNoZUZpbGVOYW1lKTtcblxuICBpZiAoIShhd2FpdCBleGlzdHMobG9jYWxQYXRoKSkgfHwgIWNoZWNrQ2FjaGUpIHtcbiAgICBpZiAoIXJlbW90ZVVybCkge1xuICAgICAgdGhyb3cgRXJyb3IoXG4gICAgICAgIGBcIiR7bmFtZX1cIiBwbHVnaW4gZG9lcyBub3QgcHJvdmlkZSBiaW5hcmllcyBzdWl0YWJsZSBmb3IgdGhlIGN1cnJlbnQgc3lzdGVtYCxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgYXdhaXQgRGVuby5ta2RpcihjYWNoZURpciwgeyByZWN1cnNpdmU6IHRydWUgfSk7XG5cbiAgICBpZiAocmVtb3RlVXJsLnN0YXJ0c1dpdGgoXCJmaWxlOi8vXCIpKSB7XG4gICAgICBjb25zdCBmcm9tUGF0aCA9IHBhdGgucmVzb2x2ZShyZW1vdGVVcmwuc2xpY2UoNykpO1xuICAgICAgYXdhaXQgY29weUZyb21Mb2NhbChuYW1lLCBmcm9tUGF0aCwgbG9jYWxQYXRoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXdhaXQgZG93bmxvYWRGcm9tUmVtb3RlKG5hbWUsIHJlbW90ZVVybCwgbG9jYWxQYXRoKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbG9jYWxQYXRoO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcHJlcGFyZShvcHRpb25zOiBQcmVwYXJlT3B0aW9ucyk6IFByb21pc2U8bnVtYmVyPiB7XG4gIGNvbnN0IHsgbmFtZSwgcHJpbnRMb2cgPSB0cnVlIH0gPSBvcHRpb25zO1xuXG4gIGlmIChwcmludExvZykge1xuICAgIGF3YWl0IGxvZy5zZXR1cCh7fSk7XG4gIH1cblxuICBjb25zdCBsb2NhbFBhdGggPSBhd2FpdCBkb3dubG9hZChvcHRpb25zKTtcblxuICBsb2cuaW5mbyhgbG9hZCBkZW5vIHBsdWdpbiBcIiR7bmFtZX1cIiBmcm9tIGxvY2FsIFwiJHtsb2NhbFBhdGh9XCJgKTtcblxuICByZXR1cm4gRGVuby5vcGVuUGx1Z2luKGxvY2FsUGF0aCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGRvd25sb2FkRnJvbVJlbW90ZShcbiAgbmFtZTogc3RyaW5nLFxuICByZW1vdGVVcmw6IHN0cmluZyxcbiAgc2F2ZVBhdGg6IHN0cmluZyxcbikge1xuICBsb2cuaW5mbyhgZG93bmxvYWRpbmcgZGVubyBwbHVnaW4gXCIke25hbWV9XCIgZnJvbSBcIiR7cmVtb3RlVXJsfVwiYCk7XG4gIGNvbnN0IGRvd25sb2FkID0gYXdhaXQgZmV0Y2gocmVtb3RlVXJsKTtcblxuICBpZiAoZG93bmxvYWQuc3RhdHVzICE9PSAyMDApIHtcbiAgICB0aHJvdyBFcnJvcihgZG93bmxvYWRpbmcgcGx1Z2luIFwiJHtuYW1lfVwiIGZyb20gXCIke3JlbW90ZVVybH1cIiBmYWlsZWQuYCk7XG4gIH1cblxuICBjb25zdCBwbHVnaW5GaWxlRGF0YSA9IGF3YWl0IGRvd25sb2FkLmFycmF5QnVmZmVyKCk7XG4gIGF3YWl0IERlbm8ud3JpdGVGaWxlKHNhdmVQYXRoLCBuZXcgVWludDhBcnJheShwbHVnaW5GaWxlRGF0YSkpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBjb3B5RnJvbUxvY2FsKG5hbWU6IHN0cmluZywgZnJvbTogc3RyaW5nLCB0bzogc3RyaW5nKSB7XG4gIGxvZy5pbmZvKGBjb3B5IGRlbm8gcGx1Z2luIFwiJHtuYW1lfVwiIGZyb20gXCIke2Zyb219XCJgKTtcblxuICBpZiAoIShhd2FpdCBleGlzdHMoZnJvbSkpKSB7XG4gICAgdGhyb3cgRXJyb3IoXG4gICAgICBgY29weSBwbHVnaW4gXCIke25hbWV9XCIgZnJvbSBcIiR7ZnJvbX1cIiBmYWlsZWQsICR7ZnJvbX0gZG9lcyBub3QgZXhpc3QuYCxcbiAgICApO1xuICB9XG5cbiAgYXdhaXQgRGVuby5jb3B5RmlsZShmcm9tLCB0byk7XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IlNBQUEsVUFBQSxFQUFBLE1BQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxTQUFBLFNBQUE7TUFFQSxFQUFBLEdBQUEsSUFBQSxDQUFBLEtBQUEsQ0FBQSxFQUFBO01BRUEsaUJBQUE7QUFDQSxVQUFBLEdBQUEsTUFBQTtBQUNBLFNBQUEsR0FBQSxHQUFBO0FBQ0EsV0FBQSxHQUFBLElBQUE7O01BR0EsWUFBQSxHQUFBLGlCQUFBLENBQUEsRUFBQTtNQWNBLGVBQUEsR0FBQSxJQUFBLENBQUEsR0FBQSxDQUFBLEdBQUEsRUFBQSxlQUFBLE9BQUEsYUFBQTtzQkFFQSxRQUFBLENBQUEsT0FBQTtZQUNBLElBQUEsR0FBQSxJQUFBLEdBQUEsVUFBQSxFQUFBLElBQUEsTUFBQSxPQUFBO1VBRUEsUUFBQSxHQUFBLE9BQUEsQ0FBQSxRQUFBLElBQUEsZUFBQTtVQUNBLFNBQUEsR0FBQSxJQUFBLENBQUEsRUFBQTtVQUNBLEdBQUEsR0FBQSxVQUFBLEVBQUEsR0FBQTtBQUNBLE9BQUEsQ0FBQSxNQUFBLENBQUEsU0FBQSxHQUFBLFlBQUE7VUFDQSxVQUFBLEdBQUEsR0FBQSxDQUFBLFFBQUEsRUFBQSxHQUFBO1VBQ0EsYUFBQSxNQUFBLElBQUEsQ0FBQSxDQUFBLEVBQUEsVUFBQSxHQUFBLFlBQUE7VUFDQSxTQUFBLEdBQUEsSUFBQSxDQUFBLE9BQUEsQ0FBQSxRQUFBLEVBQUEsYUFBQTtlQUVBLE1BQUEsQ0FBQSxTQUFBLE1BQUEsVUFBQTthQUNBLFNBQUE7a0JBQ0EsS0FBQSxFQUNBLENBQUEsRUFBQSxJQUFBLENBQUEsa0VBQUE7O2NBSUEsSUFBQSxDQUFBLEtBQUEsQ0FBQSxRQUFBO0FBQUEscUJBQUEsRUFBQSxJQUFBOztZQUVBLFNBQUEsQ0FBQSxVQUFBLEVBQUEsT0FBQTtrQkFDQSxRQUFBLEdBQUEsSUFBQSxDQUFBLE9BQUEsQ0FBQSxTQUFBLENBQUEsS0FBQSxDQUFBLENBQUE7a0JBQ0EsYUFBQSxDQUFBLElBQUEsRUFBQSxRQUFBLEVBQUEsU0FBQTs7a0JBRUEsa0JBQUEsQ0FBQSxJQUFBLEVBQUEsU0FBQSxFQUFBLFNBQUE7OztXQUlBLFNBQUE7O3NCQUdBLE9BQUEsQ0FBQSxPQUFBO1lBQ0EsSUFBQSxHQUFBLFFBQUEsRUFBQSxJQUFBLE1BQUEsT0FBQTtRQUVBLFFBQUE7Y0FDQSxHQUFBLENBQUEsS0FBQTs7O1VBR0EsU0FBQSxTQUFBLFFBQUEsQ0FBQSxPQUFBO0FBRUEsT0FBQSxDQUFBLElBQUEsRUFBQSxrQkFBQSxFQUFBLElBQUEsQ0FBQSxjQUFBLEVBQUEsU0FBQSxDQUFBLENBQUE7V0FFQSxJQUFBLENBQUEsVUFBQSxDQUFBLFNBQUE7O2VBR0Esa0JBQUEsQ0FDQSxJQUFBLEVBQ0EsU0FBQSxFQUNBLFFBQUE7QUFFQSxPQUFBLENBQUEsSUFBQSxFQUFBLHlCQUFBLEVBQUEsSUFBQSxDQUFBLFFBQUEsRUFBQSxTQUFBLENBQUEsQ0FBQTtVQUNBLFFBQUEsU0FBQSxLQUFBLENBQUEsU0FBQTtRQUVBLFFBQUEsQ0FBQSxNQUFBLEtBQUEsR0FBQTtjQUNBLEtBQUEsRUFBQSxvQkFBQSxFQUFBLElBQUEsQ0FBQSxRQUFBLEVBQUEsU0FBQSxDQUFBLFNBQUE7O1VBR0EsY0FBQSxTQUFBLFFBQUEsQ0FBQSxXQUFBO1VBQ0EsSUFBQSxDQUFBLFNBQUEsQ0FBQSxRQUFBLE1BQUEsVUFBQSxDQUFBLGNBQUE7O2VBR0EsYUFBQSxDQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsRUFBQTtBQUNBLE9BQUEsQ0FBQSxJQUFBLEVBQUEsa0JBQUEsRUFBQSxJQUFBLENBQUEsUUFBQSxFQUFBLElBQUEsQ0FBQSxDQUFBO2VBRUEsTUFBQSxDQUFBLElBQUE7Y0FDQSxLQUFBLEVBQ0EsYUFBQSxFQUFBLElBQUEsQ0FBQSxRQUFBLEVBQUEsSUFBQSxDQUFBLFVBQUEsRUFBQSxJQUFBLENBQUEsZ0JBQUE7O1VBSUEsSUFBQSxDQUFBLFFBQUEsQ0FBQSxJQUFBLEVBQUEsRUFBQSJ9